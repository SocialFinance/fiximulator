/*
 * File     : FIXimulatorFrame.java
 *
 * Author   : Zoltan Feledy
 *
 * Contents : This is the main application class.  It is combined with
 *            the user interface code most of which was autogenerated
 *            by NetBeans.
 *
 */
package org.fiximulator.ui;

import org.fiximulator.core.Execution;
import org.fiximulator.core.FIXimulator;
import org.fiximulator.core.IOI;
import org.fiximulator.core.Order;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;

public class FIXimulatorFrame extends JFrame {
    private static FIXimulator fiximulator;
    private IOI dialogIOI = null;
    private Execution dialogExecution = null;

    /**
     * Creates new form FIXimulatorFrame
     */
    public FIXimulatorFrame() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        initComponents();
    }

    public IOI getDialogIOI() {
        return dialogIOI;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        aboutDialog = new JDialog();
        aboutPanel = new JPanel();
        okButton = new JButton();
        aboutDialogLabel = new JLabel();
        instrumentFileChooser = new JFileChooser();
        ioiDialog = new JDialog();
        ioiDialogOK = new JButton();
        ioiDialogCancel = new JButton();
        ioiIDLabel = new JLabel();
        ioiSideLabel = new JLabel();
        ioiSharesLabel = new JLabel();
        ioiSymbolLabel = new JLabel();
        ioiSecurityIDLabel = new JLabel();
        ioiIDSourceLabel = new JLabel();
        ioiPriceLabel = new JLabel();
        ioiNaturalLabel = new JLabel();
        ioiDialogID = new JLabel();
        ioiDialogSide = new JComboBox();
        ioiDialogSymbol = new JTextField();
        ioiDialogSecurityID = new JTextField();
        ioiDialogIDSource = new JComboBox();
        ioiDialogNatural = new JComboBox();
        ioiDialogShares = new JFormattedTextField();
        ioiDialogPrice = new JFormattedTextField();
        executionDialog = new JDialog();
        executionDialogOK = new JButton();
        executionDialogCancel = new JButton();
        executionDialogShares = new JFormattedTextField();
        executionDialogPrice = new JFormattedTextField();
        executionSharesLabel = new JLabel();
        executionPriceLabel = new JLabel();
        messagePanel = new JPanel();
        messageScrollPane = new JScrollPane();
        messageTable = new JTable();
        statusBarPanel = new JPanel();
        executorRunningLabel = new JLabel();
        ioiSenderRunningLabel = new JLabel();
        clientConnectedLabel = new JLabel();
        messageDetailPanel = new JPanel();
        messageDetailScrollPane = new JScrollPane();
        messageDetailTable = new JTable();
        mainTabbedPane = new JTabbedPane();
        loadPanel = new JPanel();
        autoIOIPanel = new JPanel();
        securityIDComboBox = new JComboBox();
        rateSlider = new JSlider();
        rateDisplayLable = new JLabel();
        symbolLabel = new JLabel();
        stopButton = new JButton();
        startButton = new JButton();
        symbolComboBox = new JComboBox();
        securityIDLabel = new JLabel();
        ioiSliderLabel = new JLabel();
        autoExecutePanel = new JPanel();
        stopExecutorButton = new JButton();
        partialsSlider = new JSlider();
        partialsLabel = new JLabel();
        partialsNumber = new JLabel();
        startExecutorButton = new JButton();
        delayLabel = new JLabel();
        executorDelay = new JComboBox();
        ioiPanel = new JPanel();
        manualIOIPanel = new JPanel();
        singleIOIButton = new JButton();
        cancelIOIButton = new JButton();
        replaceIOIButton = new JButton();
        ioiScrollPane = new JScrollPane();
        ioiTable = new JTable();
        orderPanel = new JPanel();
        orderActionPanel = new JPanel();
        acknowledgeButton = new JButton();
        cancelButton = new JButton();
        cancelPendingButton = new JButton();
        replacePendingButton = new JButton();
        executeButton = new JButton();
        dfdButton = new JButton();
        cancelAcceptButton = new JButton();
        replaceAcceptButton = new JButton();
        orderRejectButton = new JButton();
        cancelRejectButton = new JButton();
        replaceRejectButton = new JButton();
        orderScrollPane = new JScrollPane();
        orderTable = new JTable();
        executionPanel = new JPanel();
        executionActionPanel = new JPanel();
        executionBustButton = new JButton();
        executionCorrectButton = new JButton();
        executionScrollPane = new JScrollPane();
        executionTable = new JTable();
        instrumentPanel = new JPanel();
        instrumentScrollPane = new JScrollPane();
        instrumentTable = new JTable();
        reportPanel = new JPanel();
        reportActionPanel = new JPanel();
        customQueryRunButton = new JButton();
        queryLabel = new JLabel();
        queryText = new JTextField();
        cannedQueryCombo = new JComboBox();
        querySymbolLabel = new JLabel();
        querySymbolText = new JTextField();
        cannedQueryRunButton = new JButton();
        reportScrollPane = new JScrollPane();
        reportTable = new JTable();
        settingsPanel = new JPanel();
        autoResponsePanel = new JPanel();
        autoAcknowledge = new JCheckBox();
        autoPendingCancel = new JCheckBox();
        autoPendingReplace = new JCheckBox();
        autoCancel = new JCheckBox();
        autoReplace = new JCheckBox();
        cancelSeparator = new JSeparator();
        replaceSeparator = new JSeparator();
        saveSettingsButton = new JButton();
        appSettingsPanel = new JPanel();
        pricePrecisionLabel = new JLabel();
        cachedObjectsLabel = new JLabel();
        cachedObjectsCombo = new JComboBox();
        pricePrecisionCombo = new JComboBox();
        oboCompIDSeparator = new JSeparator();
        sendOnBehalfOfCompID = new JCheckBox();
        sendOnBehalfOfSubID = new JCheckBox();
        oboCompIDSeparator1 = new JSeparator();
        logToFileLabel = new JLabel();
        logToFile = new JCheckBox();
        logToDB = new JCheckBox();
        showSettingsButton = new JButton();
        mainMenuBar = new JMenuBar();
        fileMenu = new JMenu();
        exitMenuItem = new JMenuItem();
        instrumentMenu = new JMenu();
        loadInstrumentMenuItem = new JMenuItem();
        helpMenu = new JMenu();
        aboutMenuItem = new JMenuItem();

        aboutDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        aboutDialog.setTitle("About...");
        aboutDialog.setLocationByPlatform(true);

        aboutPanel.setPreferredSize(new Dimension(200, 100));

        okButton.setText("OK");
        okButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        aboutDialogLabel.setText("FIXimulator by Zoltan Feledy");

        GroupLayout aboutPanelLayout = new GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutPanelLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
                    .addComponent(okButton)
                    .addComponent(aboutDialogLabel))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
);
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutDialogLabel, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
);

        GroupLayout aboutDialogLayout = new GroupLayout(aboutDialog.getContentPane());
        aboutDialog.getContentPane().setLayout(aboutDialogLayout);
        aboutDialogLayout.setHorizontalGroup(
            aboutDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutPanel, GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addContainerGap())
);
        aboutDialogLayout.setVerticalGroup(
            aboutDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, aboutDialogLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(aboutPanel, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
);

        ioiDialog.setTitle("Add IOI...");
        ioiDialog.setAlwaysOnTop(true);
        ioiDialog.setName("ioiDialog"); // NOI18N

        ioiDialogOK.setText("OK");
        ioiDialogOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                ioiDialogOKActionPerformed(evt);
            }
        });

        ioiDialogCancel.setText("Cancel");
        ioiDialogCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                ioiDialogCancelActionPerformed(evt);
            }
        });

        ioiIDLabel.setText("IOIid(23):");

        ioiSideLabel.setText("Side(54):");

        ioiSharesLabel.setText("IOIShares(27):");

        ioiSymbolLabel.setText("Symbol(55):");

        ioiSecurityIDLabel.setText("SecurityID(48):");

        ioiIDSourceLabel.setText("IDSource(22):");

        ioiPriceLabel.setText("Price(44):");

        ioiNaturalLabel.setText("IOINaturalFlag(130):");

        ioiDialogID.setText("ioiIDLabel");

        ioiDialogSide.setModel(new DefaultComboBoxModel(new String[] { "Buy", "Sell", "Undisclosed" }));

        ioiDialogIDSource.setModel(new DefaultComboBoxModel(new String[] { "CUSIP", "SEDOL", "RIC", "TICKER", "OTHER" }));

        ioiDialogNatural.setModel(new DefaultComboBoxModel(new String[] { "Yes", "No" }));

        ioiDialogShares.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new java.text.DecimalFormat("#0"))));

        ioiDialogPrice.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new java.text.DecimalFormat("#,##0.####"))));
        ioiDialogPrice.setText("0.0");

        GroupLayout ioiDialogLayout = new GroupLayout(ioiDialog.getContentPane());
        ioiDialog.getContentPane().setLayout(ioiDialogLayout);
        ioiDialogLayout.setHorizontalGroup(
            ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(ioiDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(ioiDialogOK)
                    .addComponent(ioiNaturalLabel)
                    .addComponent(ioiIDLabel)
                    .addComponent(ioiSideLabel)
                    .addComponent(ioiSharesLabel)
                    .addComponent(ioiSymbolLabel)
                    .addComponent(ioiSecurityIDLabel)
                    .addComponent(ioiIDSourceLabel)
                    .addComponent(ioiPriceLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(ioiDialogSide, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(ioiDialogSymbol, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(ioiDialogID)
                    .addComponent(ioiDialogSecurityID, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(ioiDialogIDSource, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(ioiDialogNatural, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(ioiDialogCancel)
                    .addComponent(ioiDialogShares, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(ioiDialogPrice, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
);

        ioiDialogLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {ioiDialogCancel, ioiDialogOK});

        ioiDialogLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {ioiIDLabel, ioiIDSourceLabel, ioiNaturalLabel, ioiPriceLabel, ioiSecurityIDLabel, ioiSharesLabel, ioiSideLabel, ioiSymbolLabel});

        ioiDialogLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {ioiDialogID, ioiDialogIDSource, ioiDialogNatural, ioiDialogPrice, ioiDialogSecurityID, ioiDialogShares, ioiDialogSide, ioiDialogSymbol});

        ioiDialogLayout.setVerticalGroup(
            ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(ioiDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(ioiIDLabel)
                    .addComponent(ioiDialogID, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(ioiSideLabel)
                    .addComponent(ioiDialogSide, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(ioiSharesLabel)
                    .addComponent(ioiDialogShares, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(ioiSymbolLabel)
                    .addComponent(ioiDialogSymbol, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(ioiSecurityIDLabel)
                    .addComponent(ioiDialogSecurityID, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(ioiIDSourceLabel, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
                    .addComponent(ioiDialogIDSource, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(ioiPriceLabel)
                    .addComponent(ioiDialogPrice, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(ioiNaturalLabel)
                    .addComponent(ioiDialogNatural, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(ioiDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(ioiDialogOK)
                    .addComponent(ioiDialogCancel))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
);

        executionDialog.setTitle("Add execution...");
        executionDialog.setName("executionDialog"); // NOI18N

        executionDialogOK.setText("OK");
        executionDialogOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                executionDialogOKActionPerformed(evt);
            }
        });

        executionDialogCancel.setText("Cancel");
        executionDialogCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                executionDialogCancelActionPerformed(evt);
            }
        });

        executionDialogShares.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new java.text.DecimalFormat("#0"))));

        executionDialogPrice.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new java.text.DecimalFormat("#,##0.####"))));
        executionDialogPrice.setText("0.0");

        executionSharesLabel.setText("LastShares(32):");

        executionPriceLabel.setText("LastPx(31):");

        GroupLayout executionDialogLayout = new GroupLayout(executionDialog.getContentPane());
        executionDialog.getContentPane().setLayout(executionDialogLayout);
        executionDialogLayout.setHorizontalGroup(
            executionDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(executionDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(executionDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(executionDialogLayout.createSequentialGroup()
                        .addGroup(executionDialogLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(executionPriceLabel)
                            .addComponent(executionSharesLabel))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(executionDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(executionDialogPrice, GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                            .addComponent(executionDialogShares, GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)))
                    .addGroup(GroupLayout.Alignment.TRAILING, executionDialogLayout.createSequentialGroup()
                        .addComponent(executionDialogOK)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(executionDialogCancel)))
                .addContainerGap())
);
        executionDialogLayout.setVerticalGroup(
            executionDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(executionDialogLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(executionDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(executionSharesLabel)
                    .addComponent(executionDialogShares, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(executionDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(executionPriceLabel)
                    .addComponent(executionDialogPrice, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(executionDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(executionDialogOK)
                    .addComponent(executionDialogCancel))
                .addContainerGap())
);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("FIXimulator");
        setBounds(new Rectangle(50, 50, 0, 0));
        setMinimumSize(new Dimension(800, 600));
        setName("fiximulatorFrame"); // NOI18N
        setResizable(false);

        messagePanel.setBorder(BorderFactory.createTitledBorder("Application Messages"));

        messageTable.setAutoCreateRowSorter(true);
        messageTable.setModel(new org.fiximulator.ui.MessageTableModel());
        messageTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        //Set initial column widths
        for (int i = 0; i < messageTable.getColumnCount(); i++) {
            if (i ==0)
            messageTable.getColumnModel().
            getColumn(i).setPreferredWidth(30);
            if (i ==1)
            messageTable.getColumnModel().
            getColumn(i).setPreferredWidth(75);
            if (i ==2)
            messageTable.getColumnModel().
            getColumn(i).setPreferredWidth(150);
            if (i ==3)
            messageTable.getColumnModel().
            getColumn(i).setPreferredWidth(150);
            if (i ==4)
            messageTable.getColumnModel().
            getColumn(i).setPreferredWidth(800);
        }
        messageScrollPane.setViewportView(messageTable);

        GroupLayout messagePanelLayout = new GroupLayout(messagePanel);
        messagePanel.setLayout(messagePanelLayout);
        messagePanelLayout.setHorizontalGroup(
            messagePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(messageScrollPane, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
);
        messagePanelLayout.setVerticalGroup(
            messagePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(messageScrollPane, GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
);

        executorRunningLabel.setIcon(new ImageIcon(getClass().getResource("/org/fiximulator/ui/red.gif"))); // NOI18N
        executorRunningLabel.setText("Executor status");
        FIXimulator.getApplication().addStatusCallbacks(clientConnectedLabel, ioiSenderRunningLabel, executorRunningLabel);

        ioiSenderRunningLabel.setIcon(new ImageIcon(getClass().getResource("/org/fiximulator/ui/red.gif"))); // NOI18N
        ioiSenderRunningLabel.setText("IOI sender status");

        clientConnectedLabel.setIcon(new ImageIcon(getClass().getResource("/org/fiximulator/ui/red.gif"))); // NOI18N
        if (FIXimulator.getApplication().getConnectionStatus())
        clientConnectedLabel.setIcon(new ImageIcon(getClass().getResource("/org/fiximulator/ui/green.gif")));
        clientConnectedLabel.setText("Client connection status");

        GroupLayout statusBarPanelLayout = new GroupLayout(statusBarPanel);
        statusBarPanel.setLayout(statusBarPanelLayout);
        statusBarPanelLayout.setHorizontalGroup(
            statusBarPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(statusBarPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(clientConnectedLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ioiSenderRunningLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executorRunningLabel)
                .addContainerGap(69, Short.MAX_VALUE))
);
        statusBarPanelLayout.setVerticalGroup(
            statusBarPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(statusBarPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(clientConnectedLabel)
                .addComponent(ioiSenderRunningLabel, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE)
                .addComponent(executorRunningLabel))
);

        messageDetailPanel.setBorder(BorderFactory.createTitledBorder("Message Details"));

        messageDetailTable.setAutoCreateRowSorter(true);
        messageDetailTable.setModel(new org.fiximulator.ui.MessageDetailTableModel(messageTable));
        messageDetailTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        for (int i = 0; i < messageDetailTable.getColumnCount(); i++) {
            if (i ==0)
            messageDetailTable.getColumnModel().
            getColumn(i).setPreferredWidth(100);
            if (i ==1)
            messageDetailTable.getColumnModel().
            getColumn(i).setPreferredWidth(40);
            if (i ==2)
            messageDetailTable.getColumnModel().
            getColumn(i).setPreferredWidth(150);
            if (i ==3)
            messageDetailTable.getColumnModel().
            getColumn(i).setPreferredWidth(150);
        }
        messageDetailScrollPane.setViewportView(messageDetailTable);

        GroupLayout messageDetailPanelLayout = new GroupLayout(messageDetailPanel);
        messageDetailPanel.setLayout(messageDetailPanelLayout);
        messageDetailPanelLayout.setHorizontalGroup(
            messageDetailPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(messageDetailScrollPane, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
);
        messageDetailPanelLayout.setVerticalGroup(
            messageDetailPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(messageDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageDetailScrollPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
);

        autoIOIPanel.setBorder(BorderFactory.createTitledBorder("Automated IOI Sender"));

        securityIDComboBox.setModel(new DefaultComboBoxModel(new String[] { "RIC", "Sedol", "RIC", "Cusip" }));
        securityIDComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                securityIDComboBoxActionPerformed(evt);
            }
        });

        rateSlider.setMajorTickSpacing(200);
        rateSlider.setMaximum(600);
        rateSlider.setMinorTickSpacing(50);
        rateSlider.setPaintLabels(true);
        rateSlider.setPaintTicks(true);
        rateSlider.setValue(60);
        rateSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                sliderChanged(evt);
            }
        });

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rateSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), rateDisplayLable, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        symbolLabel.setText("Symbol (55):");

        stopButton.setText("Stop");
        stopButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        startButton.setText("Start");
        startButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        symbolComboBox.setModel(new DefaultComboBoxModel(new String[] { "Ticker", "Sedol", "RIC", "Cusip" }));
        symbolComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                symbolComboBoxActionPerformed(evt);
            }
        });

        securityIDLabel.setText("SecurityID (48):");

        ioiSliderLabel.setText(" IOIs per minute:");

        GroupLayout autoIOIPanelLayout = new GroupLayout(autoIOIPanel);
        autoIOIPanel.setLayout(autoIOIPanelLayout);
        autoIOIPanelLayout.setHorizontalGroup(
            autoIOIPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(autoIOIPanelLayout.createSequentialGroup()
                .addGroup(autoIOIPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(autoIOIPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(startButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton))
                    .addGroup(autoIOIPanelLayout.createSequentialGroup()
                        .addComponent(ioiSliderLabel, GroupLayout.PREFERRED_SIZE, 82, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rateDisplayLable, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE))
                    .addGroup(autoIOIPanelLayout.createSequentialGroup()
                        .addComponent(symbolLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(symbolComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(securityIDLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(securityIDComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(rateSlider, GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE))
                .addContainerGap())
);

        autoIOIPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {startButton, stopButton});

        autoIOIPanelLayout.setVerticalGroup(
            autoIOIPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, autoIOIPanelLayout.createSequentialGroup()
                .addGroup(autoIOIPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(symbolLabel)
                    .addComponent(symbolComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(securityIDLabel)
                    .addComponent(securityIDComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(autoIOIPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(ioiSliderLabel)
                    .addComponent(rateDisplayLable, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rateSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(autoIOIPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton)))
);

        autoExecutePanel.setBorder(BorderFactory.createTitledBorder("Automated Executor"));

        stopExecutorButton.setText("Stop");
        stopExecutorButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                stopExecutorButtonActionPerformed(evt);
            }
        });

        partialsSlider.setMajorTickSpacing(10);
        partialsSlider.setMaximum(50);
        partialsSlider.setPaintLabels(true);
        partialsSlider.setPaintTicks(true);
        partialsSlider.setValue(0);
        partialsSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                partialsSliderChanged(evt);
            }
        });

        partialsLabel.setText("Fills per order:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, partialsSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), partialsNumber, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        startExecutorButton.setText("Start");
        startExecutorButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                startExecutorButtonActionPerformed(evt);
            }
        });

        delayLabel.setText("Delay:");

        executorDelay.setModel(new DefaultComboBoxModel(new String[] { "1 ms", "10 ms", "100 ms", "1 second", "5 seconds" }));
        executorDelay.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                executorDelayActionPerformed(evt);
            }
        });

        GroupLayout autoExecutePanelLayout = new GroupLayout(autoExecutePanel);
        autoExecutePanel.setLayout(autoExecutePanelLayout);
        autoExecutePanelLayout.setHorizontalGroup(
            autoExecutePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(autoExecutePanelLayout.createSequentialGroup()
                .addGroup(autoExecutePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(autoExecutePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(autoExecutePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(autoExecutePanelLayout.createSequentialGroup()
                                .addComponent(delayLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(executorDelay, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(partialsLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(partialsNumber))
                            .addGroup(autoExecutePanelLayout.createSequentialGroup()
                                .addComponent(startExecutorButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopExecutorButton))))
                    .addComponent(partialsSlider, GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE))
                .addContainerGap())
);

        autoExecutePanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {startExecutorButton, stopExecutorButton});

        autoExecutePanelLayout.setVerticalGroup(
            autoExecutePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(autoExecutePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(autoExecutePanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(delayLabel)
                    .addComponent(executorDelay, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(partialsNumber)
                    .addComponent(partialsLabel))
                .addGap(11, 11, 11)
                .addComponent(partialsSlider, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(autoExecutePanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(stopExecutorButton)
                    .addComponent(startExecutorButton))
                .addGap(14, 14, 14))
);

        GroupLayout loadPanelLayout = new GroupLayout(loadPanel);
        loadPanel.setLayout(loadPanelLayout);
        loadPanelLayout.setHorizontalGroup(
            loadPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, loadPanelLayout.createSequentialGroup()
                .addGroup(loadPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(autoExecutePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(autoIOIPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
);
        loadPanelLayout.setVerticalGroup(
            loadPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(loadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(autoIOIPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoExecutePanel, GroupLayout.PREFERRED_SIZE, 141, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
);

        mainTabbedPane.addTab("Load", loadPanel);

        manualIOIPanel.setBorder(BorderFactory.createTitledBorder("IOIs"));

        singleIOIButton.setText("Add IOI");
        singleIOIButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                singleIOIButtonActionPerformed(evt);
            }
        });

        cancelIOIButton.setText("Cancel IOI");
        cancelIOIButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelIOIButtonActionPerformed(evt);
            }
        });

        replaceIOIButton.setText("Replace IOI");
        replaceIOIButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                replaceIOIButtonActionPerformed(evt);
            }
        });

        GroupLayout manualIOIPanelLayout = new GroupLayout(manualIOIPanel);
        manualIOIPanel.setLayout(manualIOIPanelLayout);
        manualIOIPanelLayout.setHorizontalGroup(
            manualIOIPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(manualIOIPanelLayout.createSequentialGroup()
                .addComponent(singleIOIButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(replaceIOIButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelIOIButton)
                .addContainerGap(140, Short.MAX_VALUE))
);

        manualIOIPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {cancelIOIButton, replaceIOIButton, singleIOIButton});

        manualIOIPanelLayout.setVerticalGroup(
            manualIOIPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(manualIOIPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(singleIOIButton)
                .addComponent(replaceIOIButton)
                .addComponent(cancelIOIButton))
);

        ioiTable.setDefaultRenderer(Object.class, new IOICellRenderer());
        ioiTable.setAutoCreateRowSorter(true);
        ioiTable.setModel(new org.fiximulator.ui.IOITableModel());
        ioiTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        //Set initial column widths
        for (int i = 0; i < ioiTable.getColumnCount(); i++) {
            if (i ==0)
            ioiTable.getColumnModel().
            getColumn(i).setPreferredWidth(100);
            if (i ==1)
            ioiTable.getColumnModel().
            getColumn(i).setPreferredWidth(60);
            if (i ==2)
            ioiTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==3)
            ioiTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==4)
            ioiTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==5)
            ioiTable.getColumnModel().
            getColumn(i).setPreferredWidth(60);
            if (i ==6)
            ioiTable.getColumnModel().
            getColumn(i).setPreferredWidth(60);
            if (i ==7)
            ioiTable.getColumnModel().
            getColumn(i).setPreferredWidth(60);
            if (i ==8)
            ioiTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==9)
            ioiTable.getColumnModel().
            getColumn(i).setPreferredWidth(100);
        }
        ioiTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ioiScrollPane.setViewportView(ioiTable);

        GroupLayout ioiPanelLayout = new GroupLayout(ioiPanel);
        ioiPanel.setLayout(ioiPanelLayout);
        ioiPanelLayout.setHorizontalGroup(
            ioiPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, ioiPanelLayout.createSequentialGroup()
                .addComponent(manualIOIPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(ioiPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(ioiScrollPane, GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE))
);
        ioiPanelLayout.setVerticalGroup(
            ioiPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(ioiPanelLayout.createSequentialGroup()
                .addComponent(manualIOIPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(262, Short.MAX_VALUE))
            .addGroup(ioiPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(ioiPanelLayout.createSequentialGroup()
                    .addGap(54, 54, 54)
                    .addComponent(ioiScrollPane, GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)))
);

        mainTabbedPane.addTab("IOIs", ioiPanel);

        orderActionPanel.setBorder(BorderFactory.createTitledBorder("Orders"));

        acknowledgeButton.setText("Acknowledge");
        acknowledgeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                acknowledgeButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        cancelPendingButton.setText("Pending Cancel");
        cancelPendingButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelPendingButtonActionPerformed(evt);
            }
        });

        replacePendingButton.setText("Pending Replace");
        replacePendingButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                replacePendingButtonActionPerformed(evt);
            }
        });

        executeButton.setText("Execute");
        executeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        dfdButton.setText("DFD");
        dfdButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                dfdButtonActionPerformed(evt);
            }
        });

        cancelAcceptButton.setText("Accept Cancel");
        cancelAcceptButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelAcceptButtonActionPerformed(evt);
            }
        });

        replaceAcceptButton.setText("Accept Replace");
        replaceAcceptButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                replaceAcceptButtonActionPerformed(evt);
            }
        });

        orderRejectButton.setText("Reject");
        orderRejectButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                orderRejectButtonActionPerformed(evt);
            }
        });

        cancelRejectButton.setText("Reject Cancel");
        cancelRejectButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelRejectButtonActionPerformed(evt);
            }
        });

        replaceRejectButton.setText("Reject Replace");
        replaceRejectButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                replaceRejectButtonActionPerformed(evt);
            }
        });

        GroupLayout orderActionPanelLayout = new GroupLayout(orderActionPanel);
        orderActionPanel.setLayout(orderActionPanelLayout);
        orderActionPanelLayout.setHorizontalGroup(
            orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, orderActionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
                    .addGroup(orderActionPanelLayout.createSequentialGroup()
                        .addComponent(orderRejectButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6)
                        .addComponent(dfdButton, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE))
                    .addGroup(orderActionPanelLayout.createSequentialGroup()
                        .addComponent(acknowledgeButton, GroupLayout.PREFERRED_SIZE, 95, GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(cancelButton))
                    .addComponent(executeButton, GroupLayout.PREFERRED_SIZE, 171, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
                    .addComponent(cancelRejectButton)
                    .addComponent(cancelAcceptButton)
                    .addComponent(cancelPendingButton))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
                    .addComponent(replacePendingButton)
                    .addComponent(replaceAcceptButton)
                    .addComponent(replaceRejectButton))
                .addContainerGap())
);

        orderActionPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {replaceAcceptButton, replacePendingButton, replaceRejectButton});

        orderActionPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {cancelAcceptButton, cancelPendingButton, cancelRejectButton});

        orderActionPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {cancelButton, dfdButton});

        orderActionPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {acknowledgeButton, orderRejectButton});

        orderActionPanelLayout.setVerticalGroup(
            orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(orderActionPanelLayout.createSequentialGroup()
                .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(orderActionPanelLayout.createSequentialGroup()
                        .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(cancelPendingButton)
                            .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(cancelButton)
                                .addComponent(acknowledgeButton))
                            .addGroup(orderActionPanelLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(cancelAcceptButton)
                                    .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(orderRejectButton)
                                        .addComponent(dfdButton)))))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(cancelRejectButton)
                            .addComponent(replaceRejectButton)
                            .addComponent(executeButton)))
                    .addGroup(orderActionPanelLayout.createSequentialGroup()
                        .addComponent(replacePendingButton)
                        .addGap(6, 6, 6)
                        .addComponent(replaceAcceptButton)))
                .addContainerGap())
);

        //ioiTable.setDefaultRenderer(Object.class, new IOICellRenderer());
        orderTable.setAutoCreateRowSorter(true);
        orderTable.setModel(new org.fiximulator.ui.OrderTableModel());
        orderTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        //Set initial column widths
        for (int i = 0; i < orderTable.getColumnCount(); i++) {
            if (i ==0) // Order ID
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(90);
            if (i ==1) // Status
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(100);
            if (i ==2) // Side
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(30);
            if (i ==3)
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(60);
            if (i ==4)
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==5)
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(80);
            if (i ==6) // Limit
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==7) // TIF
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(30);
            if (i ==8) // Executed
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(70);
            if (i ==9) // Open
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==10) // AvgPx
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==11) // ClOrdID
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(90);
            if (i ==12) // OrigClOrdID
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(90);
        }
        orderTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        orderScrollPane.setViewportView(orderTable);

        GroupLayout orderPanelLayout = new GroupLayout(orderPanel);
        orderPanel.setLayout(orderPanelLayout);
        orderPanelLayout.setHorizontalGroup(
            orderPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(orderScrollPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(orderPanelLayout.createSequentialGroup()
                .addComponent(orderActionPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
);
        orderPanelLayout.setVerticalGroup(
            orderPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(orderPanelLayout.createSequentialGroup()
                .addComponent(orderActionPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderScrollPane, GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
);

        mainTabbedPane.addTab("Orders", orderPanel);

        executionActionPanel.setBorder(BorderFactory.createTitledBorder("Executions"));

        executionBustButton.setText("Bust");
        executionBustButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                executionBustButtonActionPerformed(evt);
            }
        });

        executionCorrectButton.setText("Correct");
        executionCorrectButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                executionCorrectButtonActionPerformed(evt);
            }
        });

        GroupLayout executionActionPanelLayout = new GroupLayout(executionActionPanel);
        executionActionPanel.setLayout(executionActionPanelLayout);
        executionActionPanelLayout.setHorizontalGroup(
            executionActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(executionActionPanelLayout.createSequentialGroup()
                .addComponent(executionBustButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executionCorrectButton)
                .addGap(228, 228, 228))
);
        executionActionPanelLayout.setVerticalGroup(
            executionActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(executionActionPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(executionBustButton)
                .addComponent(executionCorrectButton))
);

        executionTable.setDefaultRenderer(Object.class, new ExecutionCellRenderer());
        executionTable.setAutoCreateRowSorter(true);
        executionTable.setModel(new org.fiximulator.ui.ExecutionTableModel());
        executionTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        //Set initial column widths
        for (int i = 0; i < executionTable.getColumnCount(); i++) {
            if (i ==0) // ID
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(90);
            if (i ==1) // ClOrdID
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(90);
            if (i ==2) // Side
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(30);
            if (i ==3) // Sybol
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(60);
            if (i ==4) // LastQty
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==5) // LastPx
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==6) // CumQty
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==7) // AvgPx
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==8) // Open
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==9) // ExecType
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(70);
            if (i ==10) // ExecTransType
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(70);
            if (i ==11) // RefID
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(90);
        }
        executionTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        executionScrollPane.setViewportView(executionTable);

        GroupLayout executionPanelLayout = new GroupLayout(executionPanel);
        executionPanel.setLayout(executionPanelLayout);
        executionPanelLayout.setHorizontalGroup(
            executionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(executionActionPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(executionScrollPane, 0, 0, Short.MAX_VALUE)
);
        executionPanelLayout.setVerticalGroup(
            executionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(executionPanelLayout.createSequentialGroup()
                .addComponent(executionActionPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executionScrollPane, GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE))
);

        mainTabbedPane.addTab("Executions", executionPanel);

        instrumentTable.setAutoCreateRowSorter(true);
        instrumentTable.setModel(new org.fiximulator.ui.InstrumentTableModel());
        instrumentTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        //Set initial column widths
        for (int i = 0; i < instrumentTable.getColumnCount(); i++) {
            if (i ==0)
            instrumentTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==1)
            instrumentTable.getColumnModel().
            getColumn(i).setPreferredWidth(200);
        }
        instrumentTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        instrumentScrollPane.setViewportView(instrumentTable);

        GroupLayout instrumentPanelLayout = new GroupLayout(instrumentPanel);
        instrumentPanel.setLayout(instrumentPanelLayout);
        instrumentPanelLayout.setHorizontalGroup(
            instrumentPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(instrumentScrollPane, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
);
        instrumentPanelLayout.setVerticalGroup(
            instrumentPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(instrumentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(instrumentScrollPane, GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE))
);

        mainTabbedPane.addTab("Instruments", instrumentPanel);

        reportActionPanel.setBorder(BorderFactory.createTitledBorder("Reporting"));

        customQueryRunButton.setText("Run");
        customQueryRunButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                customQueryRunButtonActionPerformed(evt);
            }
        });

        queryLabel.setText("Query:");

        queryText.setText("select text from messages_log where text like '%35=6%';");

        cannedQueryCombo.setModel(new DefaultComboBoxModel(new String[] { "Show last 10 IOIs...", "Show last 10 orders...", "Show last 10 executions...", "Show all IOIs where Symbol(55) is...", "Show all orders where Symbol(55) is...", "Show all executions where Symbol(55) is...", "Show all activity where Symbol(55) is..." }));

        querySymbolLabel.setText("Symbol:");

        cannedQueryRunButton.setText("Run");
        cannedQueryRunButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cannedQueryRunButtonActionPerformed(evt);
            }
        });

        GroupLayout reportActionPanelLayout = new GroupLayout(reportActionPanel);
        reportActionPanel.setLayout(reportActionPanelLayout);
        reportActionPanelLayout.setHorizontalGroup(
            reportActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(reportActionPanelLayout.createSequentialGroup()
                .addGroup(reportActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(reportActionPanelLayout.createSequentialGroup()
                        .addComponent(cannedQueryCombo, GroupLayout.PREFERRED_SIZE, 276, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(querySymbolLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(querySymbolText))
                    .addGroup(GroupLayout.Alignment.TRAILING, reportActionPanelLayout.createSequentialGroup()
                        .addComponent(queryLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(queryText, GroupLayout.PREFERRED_SIZE, 334, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reportActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(cannedQueryRunButton)
                    .addComponent(customQueryRunButton))
                .addContainerGap())
);
        reportActionPanelLayout.setVerticalGroup(
            reportActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(reportActionPanelLayout.createSequentialGroup()
                .addGroup(reportActionPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(queryLabel)
                    .addComponent(customQueryRunButton)
                    .addComponent(queryText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(reportActionPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cannedQueryRunButton)
                    .addComponent(querySymbolText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(querySymbolLabel)
                    .addComponent(cannedQueryCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
);

        executionTable.setDefaultRenderer(Object.class, new ExecutionCellRenderer());
        reportTable.setAutoCreateRowSorter(true);
        reportTable.setModel(new QueryTableModel());
        reportTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        reportTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        reportScrollPane.setViewportView(reportTable);

        GroupLayout reportPanelLayout = new GroupLayout(reportPanel);
        reportPanel.setLayout(reportPanelLayout);
        reportPanelLayout.setHorizontalGroup(
            reportPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, reportPanelLayout.createSequentialGroup()
                .addGroup(reportPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(reportScrollPane, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .addComponent(reportActionPanel, GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE))
                .addContainerGap())
);
        reportPanelLayout.setVerticalGroup(
            reportPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, reportPanelLayout.createSequentialGroup()
                .addComponent(reportActionPanel, GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportScrollPane, GroupLayout.PREFERRED_SIZE, 213, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
);

        mainTabbedPane.addTab("Reports", reportPanel);

        autoResponsePanel.setBorder(BorderFactory.createTitledBorder("Automated Responses"));

        autoAcknowledge.setText("Acknowledge orders on receipt");
        try {
            autoAcknowledge.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorAutoAcknowledge"));
        } catch (Exception e) {}
        autoAcknowledge.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                autoAcknowledgeActionPerformed(evt);
            }
        });

        autoPendingCancel.setText("Send Pending Cancel");
        try {
            autoPendingCancel.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorAutoPendingCancel"));
        } catch (Exception e) {}
        autoPendingCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                autoPendingCancelActionPerformed(evt);
            }
        });

        autoPendingReplace.setText("Send Pending Replace");
        try {
            autoPendingReplace.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorAutoPendingReplace"));
        } catch (Exception e) {}
        autoPendingReplace.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                autoPendingReplaceActionPerformed(evt);
            }
        });

        autoCancel.setText("Accept order cancellations");
        try {
            autoCancel.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorAutoCancel"));
        } catch (Exception e) {}
        autoCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                autoCancelActionPerformed(evt);
            }
        });

        autoReplace.setText("Accept order replacements");
        try {
            autoReplace.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorAutoReplace"));
        } catch (Exception e) {}
        autoReplace.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                autoReplaceActionPerformed(evt);
            }
        });

        GroupLayout autoResponsePanelLayout = new GroupLayout(autoResponsePanel);
        autoResponsePanel.setLayout(autoResponsePanelLayout);
        autoResponsePanelLayout.setHorizontalGroup(
            autoResponsePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(autoResponsePanelLayout.createSequentialGroup()
                .addGroup(autoResponsePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(autoPendingCancel)
                    .addComponent(autoCancel)
                    .addComponent(cancelSeparator, GroupLayout.PREFERRED_SIZE, 177, GroupLayout.PREFERRED_SIZE)
                    .addComponent(autoAcknowledge)
                    .addComponent(replaceSeparator, GroupLayout.PREFERRED_SIZE, 177, GroupLayout.PREFERRED_SIZE)
                    .addComponent(autoPendingReplace)
                    .addComponent(autoReplace))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
);
        autoResponsePanelLayout.setVerticalGroup(
            autoResponsePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(autoResponsePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(autoAcknowledge)
                .addGap(6, 6, 6)
                .addComponent(cancelSeparator, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoPendingCancel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoCancel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(replaceSeparator, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoPendingReplace)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoReplace)
                .addContainerGap(76, Short.MAX_VALUE))
);

        saveSettingsButton.setText("Save Settings");
        saveSettingsButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveSettingsButtonActionPerformed(evt);
            }
        });

        appSettingsPanel.setBorder(BorderFactory.createTitledBorder("FIXimulator Settings"));

        pricePrecisionLabel.setText("Price precision:");

        cachedObjectsLabel.setText("Number of cached objects:");

        cachedObjectsCombo.setModel(new DefaultComboBoxModel(new String[] { "50", "100", "200" }));
        try {
            Long settingValue = FIXimulator.getApplication().getSettings()
            .getLong("FIXimulatorCachedObjects");
            if (settingValue == 50 || settingValue == 100 || settingValue == 200) {
                cachedObjectsCombo.setSelectedItem(settingValue.toString());
            } else {
                // default due to bad value
                cachedObjectsCombo.setSelectedItem("50");
                FIXimulator.getApplication().getSettings()
                .setLong("FIXimulatorCachedObjects", 50);
            }
        } catch (Exception e) {
            // default to to setting not existing
            cachedObjectsCombo.setSelectedItem("50");
            FIXimulator.getApplication().getSettings()
            .setLong("FIXimulatorCachedObjects", 50);
        }
        cachedObjectsCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cachedObjectsComboActionPerformed(evt);
            }
        });

        pricePrecisionCombo.setModel(new DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        try {
            Long settingValue = FIXimulator.getApplication().getSettings()
            .getLong("FIXimulatorPricePrecision");
            if (settingValue >= 0 && settingValue < 10) {
                pricePrecisionCombo.setSelectedItem(settingValue.toString());
            } else {
                // default due to bad value
                pricePrecisionCombo.setSelectedItem("4");
                FIXimulator.getApplication().getSettings()
                .setLong("FIXimulatorPricePrecision", 4);
            }
        } catch (Exception e) {
            // default to to setting not existing
            pricePrecisionCombo.setSelectedItem("4");
            FIXimulator.getApplication().getSettings()
            .setLong("FIXimulatorPricePrecision", 4);
        }
        pricePrecisionCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                pricePrecisionComboActionPerformed(evt);
            }
        });

        sendOnBehalfOfCompID.setText("Send OnBehalfOfCompID (115)");
        try {
            sendOnBehalfOfCompID.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorSendOnBehalfOfCompID"));
        } catch (Exception e) {}
        sendOnBehalfOfCompID.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                sendOnBehalfOfCompIDActionPerformed(evt);
            }
        });

        sendOnBehalfOfSubID.setText("Send OnBehalfOfSubID (116)");
        try {
            sendOnBehalfOfSubID.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorSendOnBehalfOfSubID"));
        } catch (Exception e) {}
        sendOnBehalfOfSubID.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                sendOnBehalfOfSubIDActionPerformed(evt);
            }
        });

        logToFileLabel.setText("<html>Changing the logging requires saving the settings and restarting the application...</htm;>");

        logToFile.setText("Log to file");
        try {
            logToFile.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorLogToFile"));
        } catch (Exception e) {}
        logToFile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                logToFileActionPerformed(evt);
            }
        });

        logToDB.setText("Log to database");
        try {
            logToDB.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorLogToDB"));
        } catch (Exception e) {}
        logToDB.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                logToDBActionPerformed(evt);
            }
        });

        GroupLayout appSettingsPanelLayout = new GroupLayout(appSettingsPanel);
        appSettingsPanel.setLayout(appSettingsPanelLayout);
        appSettingsPanelLayout.setHorizontalGroup(
            appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(appSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(logToFileLabel, GroupLayout.PREFERRED_SIZE, 197, GroupLayout.PREFERRED_SIZE)
                    .addGroup(appSettingsPanelLayout.createSequentialGroup()
                        .addComponent(logToFile)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logToDB))
                    .addComponent(oboCompIDSeparator1)
                    .addComponent(sendOnBehalfOfSubID)
                    .addGroup(appSettingsPanelLayout.createSequentialGroup()
                        .addGroup(appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(cachedObjectsLabel)
                            .addComponent(pricePrecisionLabel))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(cachedObjectsCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(pricePrecisionCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                    .addComponent(oboCompIDSeparator, GroupLayout.Alignment.TRAILING)
                    .addComponent(sendOnBehalfOfCompID))
                .addContainerGap())
);

        appSettingsPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {cachedObjectsCombo, pricePrecisionCombo});

        appSettingsPanelLayout.setVerticalGroup(
            appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(appSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(pricePrecisionLabel)
                    .addComponent(pricePrecisionCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cachedObjectsLabel)
                    .addComponent(cachedObjectsCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(oboCompIDSeparator, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendOnBehalfOfCompID)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendOnBehalfOfSubID)
                .addGap(12, 12, 12)
                .addComponent(oboCompIDSeparator1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logToFileLabel, GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(logToFile)
                    .addComponent(logToDB))
                .addContainerGap())
);

        showSettingsButton.setText("Show Settings");
        showSettingsButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                showSettingsButtonActionPerformed(evt);
            }
        });

        GroupLayout settingsPanelLayout = new GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(autoResponsePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(appSettingsPanel, GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                    .addGroup(GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                        .addComponent(showSettingsButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveSettingsButton)))
                .addContainerGap())
);

        settingsPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {saveSettingsButton, showSettingsButton});

        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(appSettingsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(autoResponsePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(saveSettingsButton)
                    .addComponent(showSettingsButton))
                .addContainerGap())
);

        mainTabbedPane.addTab("Settings", settingsPanel);

        fileMenu.setText("File");

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        loadInstrumentMenuItem.setText("Load Instruments...");
        loadInstrumentMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loadInstrumentMenuItemActionPerformed(evt);
            }
        });
        instrumentMenu.add(loadInstrumentMenuItem);

        mainMenuBar.add(instrumentMenu);

        aboutMenuItem.setText("About...");
        aboutMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        mainMenuBar.add(helpMenu);

        setJMenuBar(mainMenuBar);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(messagePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(mainTabbedPane, GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(messageDetailPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(statusBarPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
);
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(messageDetailPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainTabbedPane, GroupLayout.PREFERRED_SIZE, 336, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messagePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBarPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
);

        bindingGroup.bind();

        pack();
    } // < / editor - fold> // GEN - END:initComponents

private void okButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_okButtonActionPerformed
    aboutDialog.dispose();
} // GEN - LAST:event_okButtonActionPerformed

private void symbolComboBoxActionPerformed(ActionEvent evt) { // GEN - FIRST:event_symbolComboBoxActionPerformed
    FIXimulator.getApplication().setNewSymbol(
            symbolComboBox.getSelectedItem().toString());
} // GEN - LAST:event_symbolComboBoxActionPerformed

private void securityIDComboBoxActionPerformed(ActionEvent evt) { // GEN - FIRST:event_securityIDComboBoxActionPerformed
    FIXimulator.getApplication().setNewSecurityID(
            securityIDComboBox.getSelectedItem().toString());
} // GEN - LAST:event_securityIDComboBoxActionPerformed

private void startButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_startButtonActionPerformed
    String symbol = symbolComboBox.getSelectedItem().toString();
    String securityID = securityIDComboBox.getSelectedItem().toString();
    int rate = (int)rateSlider.getValue();
    if (rate == 0) rate = 1;
    Integer delay = 60000 / rate;
    FIXimulator.getApplication().startIOIsender(delay, symbol, securityID);
} // GEN - LAST:event_startButtonActionPerformed

private void sliderChanged(ChangeEvent evt) { // GEN - FIRST:event_sliderChanged
   if (!rateSlider.getValueIsAdjusting()) {
        int rate = (int)rateSlider.getValue();
        if (rate == 0) rate = 1;
        Integer newDelay = 60000 / rate;
        FIXimulator.getApplication().setNewDelay(newDelay);
    }
} // GEN - LAST:event_sliderChanged

private void stopButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_stopButtonActionPerformed
    FIXimulator.getApplication().stopIOIsender();
} // GEN - LAST:event_stopButtonActionPerformed

private void singleIOIButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_singleIOIButtonActionPerformed
    dialogIOI = new IOI();
    dialogIOI.setType("NEW");
    ioiDialog.setTitle("Add IOI...");
    ioiDialogID.setText(dialogIOI.getID());
    ioiDialogShares.setValue(0);
    ioiDialogSymbol.setText("");
    ioiDialogSecurityID.setText("");
    ioiDialogPrice.setValue(0.0);
    ioiDialog.pack();
    ioiDialog.setVisible(true);
} // GEN - LAST:event_singleIOIButtonActionPerformed

private void startExecutorButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_startExecutorButtonActionPerformed
    int delay = 1;
    if (this.executorDelay.getSelectedItem().toString().equals("10 ms"))
        delay = 10;
    if (this.executorDelay.getSelectedItem().toString().equals("100 ms"))
        delay = 100;
    if (this.executorDelay.getSelectedItem().toString().equals("1 second"))
        delay = 1000;
    if (this.executorDelay.getSelectedItem().toString().equals("5 seconds"))
        delay = 5000;
    int partials = (int)partialsSlider.getValue();
    if (partials == 0) partials = 1;
    FIXimulator.getApplication().startExecutor(delay, partials);
} // GEN - LAST:event_startExecutorButtonActionPerformed

private void stopExecutorButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_stopExecutorButtonActionPerformed
    FIXimulator.getApplication().stopExecutor();
} // GEN - LAST:event_stopExecutorButtonActionPerformed

private void ioiDialogCancelActionPerformed(ActionEvent evt) { // GEN - FIRST:event_ioiDialogCancelActionPerformed
    ioiDialog.dispose();
} // GEN - LAST:event_ioiDialogCancelActionPerformed

private void ioiDialogOKActionPerformed(ActionEvent evt) { // GEN - FIRST:event_ioiDialogOKActionPerformed
    // Set fields
    dialogIOI.setSide(ioiDialogSide.getSelectedItem().toString());
    dialogIOI.setQuantity(Integer.parseInt(ioiDialogShares.getText()));
    dialogIOI.setSymbol(ioiDialogSymbol.getText());
    dialogIOI.setSecurityID(ioiDialogSecurityID.getText());
    dialogIOI.setIDSource(ioiDialogIDSource.getSelectedItem().toString());
    dialogIOI.setPrice(Double.parseDouble(ioiDialogPrice.getText()));
    dialogIOI.setNatural(ioiDialogNatural.getSelectedItem().toString());
    FIXimulator.getApplication().sendIOI(dialogIOI);
    ioiDialog.dispose();
} // GEN - LAST:event_ioiDialogOKActionPerformed

private void cancelIOIButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_cancelIOIButtonActionPerformed
    int row = ioiTable.getSelectedRow();
    // if there is a row selected
    if (row != -1) {
        row = ioiTable.convertRowIndexToModel(row);
        IOI ioi = FIXimulator.getApplication().getIOIs().getIOI(row);
        IOI cancelIOI = ioi.clone();
        cancelIOI.setType("CANCEL");
        FIXimulator.getApplication().sendIOI(cancelIOI);
    }
} // GEN - LAST:event_cancelIOIButtonActionPerformed

private void replaceIOIButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_replaceIOIButtonActionPerformed
    int row = ioiTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        ioiDialog.setTitle("Replace IOI...");
        row = ioiTable.convertRowIndexToModel(row);
        IOI ioi = FIXimulator.getApplication().getIOIs().getIOI(row);
        dialogIOI = ioi.clone();
        dialogIOI.setType("REPLACE");

        ioiDialogID.setText(dialogIOI.getID());
        String side = dialogIOI.getSide();
        if (side.equals("BUY")) ioiDialogSide.setSelectedIndex(0);
        if (side.equals("SELL")) ioiDialogSide.setSelectedIndex(1);
        if (side.equals("UNDISCLOSED")) ioiDialogSide.setSelectedIndex(2);
        ioiDialogShares.setValue(dialogIOI.getQuantity());
        ioiDialogSymbol.setText(dialogIOI.getSymbol());
        ioiDialogSecurityID.setText(dialogIOI.getSecurityID());
        String idSource = dialogIOI.getIDSource();
        if (idSource.equals("CUSIP")) ioiDialogIDSource.setSelectedIndex(0);
        if (idSource.equals("SEDOL")) ioiDialogIDSource.setSelectedIndex(1);
        if (idSource.equals("RIC")) ioiDialogIDSource.setSelectedIndex(2);
        if (idSource.equals("TICKER")) ioiDialogIDSource.setSelectedIndex(3);
        if (idSource.equals("OTHER")) ioiDialogIDSource.setSelectedIndex(4);
        ioiDialogPrice.setValue(dialogIOI.getPrice());
        ioiDialogNatural.setSelectedIndex(0);
        if (dialogIOI.getNatural().equals("NO"))
            ioiDialogNatural.setSelectedIndex(1);
        ioiDialog.pack();
        ioiDialog.setVisible(true);
    }
} // GEN - LAST:event_replaceIOIButtonActionPerformed

private void acknowledgeButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_acknowledgeButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.getStatus().equals("Received") ||
             order.getStatus().equals("Pending New")) {
            FIXimulator.getApplication().acknowledge(order);
        } else {
            System.out.println(
                    "Order in status \"" + order.getStatus() + "\" " +
                    "cannot be acknowledged...");
        }
    }
} // GEN - LAST:event_acknowledgeButtonActionPerformed

private void partialsSliderChanged(ChangeEvent evt) { // GEN - FIRST:event_partialsSliderChanged
   if (!this.partialsSlider.getValueIsAdjusting()) {
        int partials = (int)partialsSlider.getValue();
        if (partials == 0) partials = 1;
        System.out.println("The number of partials was changed to: " + partials);
        FIXimulator.getApplication().setNewExecutorPartials(partials);
    }
} // GEN - LAST:event_partialsSliderChanged

private void executionBustButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_executionBustButtonActionPerformed
    int row = executionTable.getSelectedRow();
    // if there is a row selected
    if (row != -1) {
        row = executionTable.convertRowIndexToModel(row);
        Execution execution =
                FIXimulator.getApplication().getExecutions().getExecution(row);
        if (execution.getExecType().equals("Fill") ||
             execution.getExecType().equals("Partial fill")) {
            FIXimulator.getApplication().bust(execution);
        } else {
            System.out.println(
                    "\"" + execution.getExecType() + "\" " +
                    "executions cannot be busted...");
        }
    }
} // GEN - LAST:event_executionBustButtonActionPerformed

private void executorDelayActionPerformed(ActionEvent evt) { // GEN - FIRST:event_executorDelayActionPerformed
    int delay = 1;
    String value = executorDelay.getSelectedItem().toString();
    if (value.equals("10 ms")) delay = 10;
    if (value.equals("100 ms")) delay = 100;
    if (value.equals("1 second")) delay = 1000;
    if (value.equals("5 seconds")) delay = 5000;
    FIXimulator.getApplication().setNewExecutorDelay(delay);
} // GEN - LAST:event_executorDelayActionPerformed

private void autoReplaceActionPerformed(ActionEvent evt) { // GEN - FIRST:event_autoReplaceActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorAutoReplace",
        autoReplace.isSelected());
} // GEN - LAST:event_autoReplaceActionPerformed

private void autoPendingCancelActionPerformed(ActionEvent evt) { // GEN - FIRST:event_autoPendingCancelActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorAutoPendingCancel",
        autoPendingCancel.isSelected());
} // GEN - LAST:event_autoPendingCancelActionPerformed

private void autoAcknowledgeActionPerformed(ActionEvent evt) { // GEN - FIRST:event_autoAcknowledgeActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorAutoAcknowledge",
        autoAcknowledge.isSelected());
} // GEN - LAST:event_autoAcknowledgeActionPerformed

private void autoPendingReplaceActionPerformed(ActionEvent evt) { // GEN - FIRST:event_autoPendingReplaceActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorAutoPendingReplace",
        autoPendingReplace.isSelected());
} // GEN - LAST:event_autoPendingReplaceActionPerformed

private void autoCancelActionPerformed(ActionEvent evt) { // GEN - FIRST:event_autoCancelActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorAutoCancel",
        autoCancel.isSelected());
} // GEN - LAST:event_autoCancelActionPerformed

private void saveSettingsButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_saveSettingsButtonActionPerformed
    FIXimulator.getApplication().saveSettings();
} // GEN - LAST:event_saveSettingsButtonActionPerformed

private void exitMenuItemActionPerformed(ActionEvent evt) { // GEN - FIRST:event_exitMenuItemActionPerformed
System.exit(0);
} // GEN - LAST:event_exitMenuItemActionPerformed

    @SuppressWarnings("static-access")
private void loadInstrumentMenuItemActionPerformed(ActionEvent evt) { // GEN - FIRST:event_loadInstrumentMenuItemActionPerformed
int result = instrumentFileChooser.showOpenDialog(this);
    if (result == instrumentFileChooser.APPROVE_OPTION) {
        File file = instrumentFileChooser.getSelectedFile();
        FIXimulator.getInstruments().reloadInstrumentSet(file);
    } else {
        System.out.println("User cancelled loading file...");
    }
} // GEN - LAST:event_loadInstrumentMenuItemActionPerformed

private void aboutMenuItemActionPerformed(ActionEvent evt) { // GEN - FIRST:event_aboutMenuItemActionPerformed
aboutDialog.pack();
    aboutDialog.setVisible(true);
} // GEN - LAST:event_aboutMenuItemActionPerformed

private void pricePrecisionComboActionPerformed(ActionEvent evt) { // GEN - FIRST:event_pricePrecisionComboActionPerformed
    FIXimulator.getApplication().getSettings()
            .setLong("FIXimulatorPricePrecision",
            Long.valueOf(pricePrecisionCombo.getSelectedItem().toString()));
} // GEN - LAST:event_pricePrecisionComboActionPerformed

private void sendOnBehalfOfCompIDActionPerformed(ActionEvent evt) { // GEN - FIRST:event_sendOnBehalfOfCompIDActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorSendOnBehalfOfCompID",
        sendOnBehalfOfCompID.isSelected());
} // GEN - LAST:event_sendOnBehalfOfCompIDActionPerformed

private void sendOnBehalfOfSubIDActionPerformed(ActionEvent evt) { // GEN - FIRST:event_sendOnBehalfOfSubIDActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorSendOnBehalfOfSubID",
        sendOnBehalfOfSubID.isSelected());
} // GEN - LAST:event_sendOnBehalfOfSubIDActionPerformed

private void cachedObjectsComboActionPerformed(ActionEvent evt) { // GEN - FIRST:event_cachedObjectsComboActionPerformed
    FIXimulator.getApplication().getSettings()
            .setLong("FIXimulatorCachedObjects",
            Long.valueOf(cachedObjectsCombo.getSelectedItem().toString()));
} // GEN - LAST:event_cachedObjectsComboActionPerformed

private void showSettingsButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_showSettingsButtonActionPerformed
    System.out.println(FIXimulator.getApplication().getSettings().toString());
} // GEN - LAST:event_showSettingsButtonActionPerformed

private void orderRejectButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_orderRejectButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.getStatus().equals("Received") ||
             order.getStatus().equals("Pending New")) {
            FIXimulator.getApplication().reject(order);
        } else {
            System.out.println(
                    "Order in status \"" + order.getStatus() + "\" " +
                    "cannot be rejected...");
        }
    }
} // GEN - LAST:event_orderRejectButtonActionPerformed

private void cancelButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_cancelButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        FIXimulator.getApplication().cancel(order);
    }
} // GEN - LAST:event_cancelButtonActionPerformed

private void dfdButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_dfdButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        FIXimulator.getApplication().dfd(order);
    }
} // GEN - LAST:event_dfdButtonActionPerformed

private void cancelPendingButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_cancelPendingButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.isReceivedCancel()) {
            FIXimulator.getApplication().pendingCancel(order);
        } else {
            System.out.println(
                    "Order is not in a valid status for pending cancel");
        }
    }
} // GEN - LAST:event_cancelPendingButtonActionPerformed

private void cancelAcceptButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_cancelAcceptButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        FIXimulator.getApplication().cancel(order);
    }
} // GEN - LAST:event_cancelAcceptButtonActionPerformed

private void replacePendingButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_replacePendingButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.isReceivedReplace()) {
            FIXimulator.getApplication().pendingReplace(order);
        } else {
            System.out.println(
                    "Order is not in a valid status for pending replace");
        }
    }
} // GEN - LAST:event_replacePendingButtonActionPerformed

private void replaceAcceptButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_replaceAcceptButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.isReceivedReplace() ||
                order.getStatus().equals("Pending Replace")) {
            FIXimulator.getApplication().replace(order);
        } else {
            System.out.println(
                    "Order is not in a valid status to replace");
        }
    }
} // GEN - LAST:event_replaceAcceptButtonActionPerformed

private void cancelRejectButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_cancelRejectButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.isReceivedCancel() ||
                order.getStatus().equals("Pending Cancel")) {
            FIXimulator.getApplication().rejectCancelReplace(order, true);
        } else {
            System.out.println(
                    "Order is not in a valid status to reject cancellation");
        }
    }
} // GEN - LAST:event_cancelRejectButtonActionPerformed

private void replaceRejectButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_replaceRejectButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.isReceivedReplace() ||
                order.getStatus().equals("Pending Replace")) {
            FIXimulator.getApplication().rejectCancelReplace(order, false);
        } else {
            System.out.println(
                    "Order is not in a valid status to reject replace request");
        }
    }
} // GEN - LAST:event_replaceRejectButtonActionPerformed

private void executionDialogOKActionPerformed(ActionEvent evt) { // GEN - FIRST:event_executionDialogOKActionPerformed
    dialogExecution.setLastShares(
            Integer.parseInt(executionDialogShares.getText()));
    dialogExecution.setLastPx(
            Double.parseDouble(executionDialogPrice.getText()));
    String refID = dialogExecution.getRefID();
    // New execution
    if (refID == null) {
        FIXimulator.getApplication().execute(dialogExecution);
    // Correction
    } else {
        FIXimulator.getApplication().correct(dialogExecution);
    }
    executionDialog.dispose();
} // GEN - LAST:event_executionDialogOKActionPerformed

private void executionDialogCancelActionPerformed(ActionEvent evt) { // GEN - FIRST:event_executionDialogCancelActionPerformed
    executionDialog.dispose();
} // GEN - LAST:event_executionDialogCancelActionPerformed

private void executeButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_executeButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        dialogExecution = new Execution(order);
        executionDialogShares.setValue(0);
        executionDialogPrice.setValue(0.0);
        executionDialog.pack();
        executionDialog.setVisible(true);
    }
} // GEN - LAST:event_executeButtonActionPerformed

private void executionCorrectButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_executionCorrectButtonActionPerformed
    int row = executionTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = executionTable.convertRowIndexToModel(row);
        Execution execution =
                FIXimulator.getApplication().getExecutions().getExecution(row);
        if (execution.getExecType().equals("Fill") ||
             execution.getExecType().equals("Partial fill")) {
            dialogExecution = execution.clone();
            executionDialogShares.setValue(execution.getLastShares());
            executionDialogPrice.setValue(execution.getLastPx());
            executionDialog.pack();
            executionDialog.setVisible(true);
        } else {
            System.out.println(
                    "\"" + execution.getExecType() + "\" " +
                    "executions cannot be corrected...");
        }
    }
} // GEN - LAST:event_executionCorrectButtonActionPerformed

private void logToFileActionPerformed(ActionEvent evt) { // GEN - FIRST:event_logToFileActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorLogToFile",
        sendOnBehalfOfSubID.isSelected());
} // GEN - LAST:event_logToFileActionPerformed

private void logToDBActionPerformed(ActionEvent evt) { // GEN - FIRST:event_logToDBActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorLogToDB",
        sendOnBehalfOfSubID.isSelected());
} // GEN - LAST:event_logToDBActionPerformed

private void customQueryRunButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_customQueryRunButtonActionPerformed
    QueryTableModel qtm = (QueryTableModel) reportTable.getModel();
    qtm.setQuery(queryText.getText().trim());
} // GEN - LAST:event_customQueryRunButtonActionPerformed

private void cannedQueryRunButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_cannedQueryRunButtonActionPerformed
    QueryTableModel qtm = (QueryTableModel) reportTable.getModel();
    String can = cannedQueryCombo.getSelectedItem().toString();
    String symbol = querySymbolText.getText().toString().trim().toLowerCase();
    String query = "";

    if (can.equals("Show last 10 IOIs..."))
        query = "select id,text from messages_log "
                + "where text like '%35=6%' order by id desc limit 10;";
    if (can.equals("Show last 10 orders..."))
        query = "select id,text from messages_log "
                + "where text like '%35=D%' order by id desc limit 10;";
    if (can.equals("Show last 10 executions..."))
                query = "select id,text from messages_log "
                + "where text like '%35=8%' order by id desc limit 10;";
    if (can.equals("Show all IOIs where Symbol(55) is..."))
        query = "select id,text from messages_log "
                + "where text like '%35=6%' and lower(text) like '%55="
                + symbol + "%';";
    if (can.equals("Show all orders where Symbol(55) is..."))
        query = "select id,text from messages_log "
                + "where text like '%35=D%' and lower(text) like '%55="
                + symbol + "%';";
    if (can.equals("Show all executions where Symbol(55) is..."))
            query = "select id,text from messages_log "
                + "where text like '%35=8%' and lower(text) like '%55="
                + symbol + "%';";
    if (can.equals("Show all activity where Symbol(55) is..."))
            query = "select id,text from messages_log "
                + "where lower(text) like '%55=" + symbol + "%';";

    qtm.setQuery(query);

    if (reportTable.getColumnCount() > 1) {
        reportTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        reportTable.getColumnModel().getColumn(1).setPreferredWidth(1000);
    }
} // GEN - LAST:event_cannedQueryRunButtonActionPerformed

    public static void main(String args[]) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                fiximulator = new FIXimulator();
                fiximulator.start();
                new FIXimulatorFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JDialog aboutDialog;
    private JLabel aboutDialogLabel;
    private JMenuItem aboutMenuItem;
    private JPanel aboutPanel;
    private JButton acknowledgeButton;
    private JPanel appSettingsPanel;
    private JCheckBox autoAcknowledge;
    private JCheckBox autoCancel;
    private JPanel autoExecutePanel;
    private JPanel autoIOIPanel;
    private JCheckBox autoPendingCancel;
    private JCheckBox autoPendingReplace;
    private JCheckBox autoReplace;
    private JPanel autoResponsePanel;
    private JComboBox cachedObjectsCombo;
    private JLabel cachedObjectsLabel;
    private JButton cancelAcceptButton;
    private JButton cancelButton;
    private JButton cancelIOIButton;
    private JButton cancelPendingButton;
    private JButton cancelRejectButton;
    private JSeparator cancelSeparator;
    private JComboBox cannedQueryCombo;
    private JButton cannedQueryRunButton;
    private JLabel clientConnectedLabel;
    private JButton customQueryRunButton;
    private JLabel delayLabel;
    private JButton dfdButton;
    private JButton executeButton;
    private JPanel executionActionPanel;
    private JButton executionBustButton;
    private JButton executionCorrectButton;
    private JDialog executionDialog;
    private JButton executionDialogCancel;
    private JButton executionDialogOK;
    private JFormattedTextField executionDialogPrice;
    private JFormattedTextField executionDialogShares;
    private JPanel executionPanel;
    private JLabel executionPriceLabel;
    private JScrollPane executionScrollPane;
    private JLabel executionSharesLabel;
    private JTable executionTable;
    private JComboBox executorDelay;
    private JLabel executorRunningLabel;
    private JMenuItem exitMenuItem;
    private JMenu fileMenu;
    private JMenu helpMenu;
    private JFileChooser instrumentFileChooser;
    private JMenu instrumentMenu;
    private JPanel instrumentPanel;
    private JScrollPane instrumentScrollPane;
    private JTable instrumentTable;
    private JDialog ioiDialog;
    private JButton ioiDialogCancel;
    private JLabel ioiDialogID;
    private JComboBox ioiDialogIDSource;
    private JComboBox ioiDialogNatural;
    private JButton ioiDialogOK;
    private JFormattedTextField ioiDialogPrice;
    private JTextField ioiDialogSecurityID;
    private JFormattedTextField ioiDialogShares;
    private JComboBox ioiDialogSide;
    private JTextField ioiDialogSymbol;
    private JLabel ioiIDLabel;
    private JLabel ioiIDSourceLabel;
    private JLabel ioiNaturalLabel;
    private JPanel ioiPanel;
    private JLabel ioiPriceLabel;
    private JScrollPane ioiScrollPane;
    private JLabel ioiSecurityIDLabel;
    private JLabel ioiSenderRunningLabel;
    private JLabel ioiSharesLabel;
    private JLabel ioiSideLabel;
    private JLabel ioiSliderLabel;
    private JLabel ioiSymbolLabel;
    private JTable ioiTable;
    private JMenuItem loadInstrumentMenuItem;
    private JPanel loadPanel;
    private JCheckBox logToDB;
    private JCheckBox logToFile;
    private JLabel logToFileLabel;
    private JMenuBar mainMenuBar;
    private JTabbedPane mainTabbedPane;
    private JPanel manualIOIPanel;
    private JPanel messageDetailPanel;
    private JScrollPane messageDetailScrollPane;
    private JTable messageDetailTable;
    private JPanel messagePanel;
    private JScrollPane messageScrollPane;
    private JTable messageTable;
    private JSeparator oboCompIDSeparator;
    private JSeparator oboCompIDSeparator1;
    private JButton okButton;
    private JPanel orderActionPanel;
    private JPanel orderPanel;
    private JButton orderRejectButton;
    private JScrollPane orderScrollPane;
    private JTable orderTable;
    private JLabel partialsLabel;
    private JLabel partialsNumber;
    private JSlider partialsSlider;
    private JComboBox pricePrecisionCombo;
    private JLabel pricePrecisionLabel;
    private JLabel queryLabel;
    private JLabel querySymbolLabel;
    private JTextField querySymbolText;
    private JTextField queryText;
    private JLabel rateDisplayLable;
    private JSlider rateSlider;
    private JButton replaceAcceptButton;
    private JButton replaceIOIButton;
    private JButton replacePendingButton;
    private JButton replaceRejectButton;
    private JSeparator replaceSeparator;
    private JPanel reportActionPanel;
    private JPanel reportPanel;
    private JScrollPane reportScrollPane;
    private JTable reportTable;
    private JButton saveSettingsButton;
    private JComboBox securityIDComboBox;
    private JLabel securityIDLabel;
    private JCheckBox sendOnBehalfOfCompID;
    private JCheckBox sendOnBehalfOfSubID;
    private JPanel settingsPanel;
    private JButton showSettingsButton;
    private JButton singleIOIButton;
    private JButton startButton;
    private JButton startExecutorButton;
    private JPanel statusBarPanel;
    private JButton stopButton;
    private JButton stopExecutorButton;
    private JComboBox symbolComboBox;
    private JLabel symbolLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
