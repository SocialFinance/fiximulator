/*
 * File     : FIXimulatorFrame.java
 *
 * Author   : Zoltan Feledy
 *
 * Contents : This is the main application class.  It is combined with
 *            the user interface code most of which was autogenerated
 *            by NetBeans.
 *
 */
package org.fiximulator.ui;

import com.sofi.quotes.QuoteEndpoint;
import com.sofi.quotes.QuoteService;
import com.sofi.quotes.Timeout;

import org.fiximulator.core.Execution;
import org.fiximulator.core.FIXimulator;
import org.fiximulator.core.Order;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Properties;

import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;

public class FIXimulatorFrame extends JFrame {
    private static String XIGNITE_SECRET = "xignite.secret";
    private static String[] requiredProperties = { XIGNITE_SECRET };

    public static void main(String args[]) {
        final Properties props = new Properties();
        // Check first if any java Properties are set
        for (String key : requiredProperties) {
            String val = System.getProperty(key);
            if (val != null && !val.isEmpty()) {
                props.setProperty(key, val);
            }
            // Allow environment variables to over-ride system properties
            // Change all . (periods) to _ (underscores, and all caps to convert
            // a property-name to an environment variable name.
            String envKey = key.replaceAll("\\.", "_").toUpperCase();
            val = System.getenv(envKey);
            if (val != null && !val.isEmpty()) {
                props.setProperty(key, val);
            }
            val = props.getProperty(key);
            if (val == null || val.isEmpty()) {
                System.err.println("ERROR: Failed to find value for " + key + ", exiting");
                System.exit(-1);
            }
        }

        final QuoteService quoteService = new QuoteService(props.getProperty(XIGNITE_SECRET), QuoteEndpoint.GLOBAL_DELAYED, Timeout.CrossRegion);
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FIXimulator().start();
                new FIXimulatorFrame(quoteService).setVisible(true);
            }
        });
    }

    private Execution dialogExecution = null;
    private final QuoteService quoteService;

    /**
     * Creates new form FIXimulatorFrame
     */
    public FIXimulatorFrame(QuoteService quoteService) {
        this.quoteService = quoteService;
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        aboutDialog = new JDialog();
        aboutPanel = new JPanel();
        okButton = new JButton();
        aboutDialogLabel = new JLabel();
        executionDialog = new JDialog();
        executionDialogOK = new JButton();
        executionDialogCancel = new JButton();
        executionDialogShares = new JFormattedTextField();
        executionDialogPrice = new JFormattedTextField();
        executionSharesLabel = new JLabel();
        executionPriceLabel = new JLabel();
        messagePanel = new JPanel();
        messageScrollPane = new JScrollPane();
        messageTable = new JTable();
        statusBarPanel = new JPanel();
        executorRunningLabel = new JLabel();
        clientConnectedLabel = new JLabel();
        messageDetailPanel = new JPanel();
        messageDetailScrollPane = new JScrollPane();
        messageDetailTable = new JTable();
        mainTabbedPane = new JTabbedPane();
        loadPanel = new JPanel();
        autoExecutePanel = new JPanel();
        stopExecutorButton = new JButton();
        partialsSlider = new JSlider();
        partialsLabel = new JLabel();
        partialsNumber = new JLabel();
        startExecutorButton = new JButton();
        delayLabel = new JLabel();
        executorDelay = new JComboBox();
        orderPanel = new JPanel();
        orderActionPanel = new JPanel();
        acknowledgeButton = new JButton();
        cancelButton = new JButton();
        cancelPendingButton = new JButton();
        replacePendingButton = new JButton();
        executeButton = new JButton();
        dfdButton = new JButton();
        cancelAcceptButton = new JButton();
        replaceAcceptButton = new JButton();
        orderRejectButton = new JButton();
        cancelRejectButton = new JButton();
        replaceRejectButton = new JButton();
        orderScrollPane = new JScrollPane();
        orderTable = new JTable();
        executionPanel = new JPanel();
        executionActionPanel = new JPanel();
        executionBustButton = new JButton();
        executionCorrectButton = new JButton();
        executionScrollPane = new JScrollPane();
        executionTable = new JTable();
        settingsPanel = new JPanel();
        autoResponsePanel = new JPanel();
        autoAcknowledge = new JCheckBox();
        autoPendingCancel = new JCheckBox();
        autoPendingReplace = new JCheckBox();
        autoCancel = new JCheckBox();
        autoReplace = new JCheckBox();
        cancelSeparator = new JSeparator();
        replaceSeparator = new JSeparator();
        saveSettingsButton = new JButton();
        appSettingsPanel = new JPanel();
        pricePrecisionLabel = new JLabel();
        cachedObjectsLabel = new JLabel();
        cachedObjectsCombo = new JComboBox();
        pricePrecisionCombo = new JComboBox();
        oboCompIDSeparator = new JSeparator();
        sendOnBehalfOfCompID = new JCheckBox();
        sendOnBehalfOfSubID = new JCheckBox();
        oboCompIDSeparator1 = new JSeparator();
        logToFileLabel = new JLabel();
        logToFile = new JCheckBox();
        logToDB = new JCheckBox();
        showSettingsButton = new JButton();
        mainMenuBar = new JMenuBar();
        fileMenu = new JMenu();
        exitMenuItem = new JMenuItem();
        helpMenu = new JMenu();
        aboutMenuItem = new JMenuItem();

        aboutDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        aboutDialog.setTitle("About...");
        aboutDialog.setLocationByPlatform(true);

        aboutPanel.setPreferredSize(new Dimension(200, 100));

        okButton.setText("OK");
        okButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        aboutDialogLabel.setText("FIXimulator by Zoltan Feledy");

        GroupLayout aboutPanelLayout = new GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutPanelLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
                    .addComponent(okButton)
                    .addComponent(aboutDialogLabel))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutDialogLabel, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout aboutDialogLayout = new GroupLayout(aboutDialog.getContentPane());
        aboutDialog.getContentPane().setLayout(aboutDialogLayout);
        aboutDialogLayout.setHorizontalGroup(
            aboutDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutPanel, GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addContainerGap())
        );
        aboutDialogLayout.setVerticalGroup(
            aboutDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, aboutDialogLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(aboutPanel, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );

        executionDialog.setTitle("Add execution...");
        executionDialog.setName("executionDialog"); // NOI18N

        executionDialogOK.setText("OK");
        executionDialogOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                executionDialogOKActionPerformed(evt);
            }
        });

        executionDialogCancel.setText("Cancel");
        executionDialogCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                executionDialogCancelActionPerformed(evt);
            }
        });

        executionDialogShares.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new java.text.DecimalFormat("#0"))));

        executionDialogPrice.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new java.text.DecimalFormat("#,##0.####"))));
        executionDialogPrice.setText("0.0");

        executionSharesLabel.setText("LastShares(32):");

        executionPriceLabel.setText("LastPx(31):");

        GroupLayout executionDialogLayout = new GroupLayout(executionDialog.getContentPane());
        executionDialog.getContentPane().setLayout(executionDialogLayout);
        executionDialogLayout.setHorizontalGroup(
            executionDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(executionDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(executionDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(executionDialogLayout.createSequentialGroup()
                        .addGroup(executionDialogLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(executionPriceLabel)
                            .addComponent(executionSharesLabel))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(executionDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(executionDialogPrice, GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                            .addComponent(executionDialogShares, GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)))
                    .addGroup(GroupLayout.Alignment.TRAILING, executionDialogLayout.createSequentialGroup()
                        .addComponent(executionDialogOK)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(executionDialogCancel)))
                .addContainerGap())
        );
        executionDialogLayout.setVerticalGroup(
            executionDialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(executionDialogLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(executionDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(executionSharesLabel)
                    .addComponent(executionDialogShares, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(executionDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(executionPriceLabel)
                    .addComponent(executionDialogPrice, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(executionDialogLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(executionDialogOK)
                    .addComponent(executionDialogCancel))
                .addContainerGap())
        );

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("FIXimulator");
        setBounds(new Rectangle(50, 50, 0, 0));
        setMinimumSize(new Dimension(800, 600));
        setName("fiximulatorFrame"); // NOI18N
        setResizable(false);

        messagePanel.setBorder(BorderFactory.createTitledBorder("Application Messages"));

        messageTable.setAutoCreateRowSorter(true);
        messageTable.setModel(new org.fiximulator.ui.MessageTableModel());
        messageTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        //Set initial column widths
        for (int i = 0; i < messageTable.getColumnCount(); i++) {
            if (i == 0) {
                messageTable.getColumnModel().
                    getColumn(i).setPreferredWidth(30);
            }
            if (i == 1) {
                messageTable.getColumnModel().
                    getColumn(i).setPreferredWidth(75);
            }
            if (i == 2) {
                messageTable.getColumnModel().
                    getColumn(i).setPreferredWidth(150);
            }
            if (i == 3) {
                messageTable.getColumnModel().
                    getColumn(i).setPreferredWidth(150);
            }
            if (i == 4) {
                messageTable.getColumnModel().
                    getColumn(i).setPreferredWidth(800);
            }
        }
        messageScrollPane.setViewportView(messageTable);

        GroupLayout messagePanelLayout = new GroupLayout(messagePanel);
        messagePanel.setLayout(messagePanelLayout);
        messagePanelLayout.setHorizontalGroup(
            messagePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(messageScrollPane, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
        );
        messagePanelLayout.setVerticalGroup(
            messagePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(messageScrollPane, GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
        );

        executorRunningLabel.setIcon(new ImageIcon(getClass().getResource("/org/fiximulator/ui/red.gif"))); // NOI18N
        executorRunningLabel.setText("Executor status");
        FIXimulator.getApplication().addStatusCallbacks(clientConnectedLabel, executorRunningLabel);

        clientConnectedLabel.setIcon(new ImageIcon(getClass().getResource("/org/fiximulator/ui/red.gif"))); // NOI18N
        if (FIXimulator.getApplication().getConnectionStatus())
            clientConnectedLabel.setIcon(new ImageIcon(getClass().getResource("/org/fiximulator/ui/green.gif")));
        clientConnectedLabel.setText("Client connection status");

        GroupLayout statusBarPanelLayout = new GroupLayout(statusBarPanel);
        statusBarPanel.setLayout(statusBarPanelLayout);
        statusBarPanelLayout.setHorizontalGroup(
            statusBarPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(statusBarPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(clientConnectedLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executorRunningLabel)
                .addContainerGap(69, Short.MAX_VALUE))
        );
        statusBarPanelLayout.setVerticalGroup(
            statusBarPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(statusBarPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(clientConnectedLabel)
                .addComponent(executorRunningLabel))
        );

        messageDetailPanel.setBorder(BorderFactory.createTitledBorder("Message Details"));

        messageDetailTable.setAutoCreateRowSorter(true);
        messageDetailTable.setModel(new org.fiximulator.ui.MessageDetailTableModel(messageTable));
        messageDetailTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        for (int i = 0; i < messageDetailTable.getColumnCount(); i++) {
            if (i == 0) {
                messageDetailTable.getColumnModel().
                    getColumn(i).setPreferredWidth(100);
            }
            if (i == 1) {
                messageDetailTable.getColumnModel().
                    getColumn(i).setPreferredWidth(40);
            }
            if (i == 2) {
                messageDetailTable.getColumnModel().
                    getColumn(i).setPreferredWidth(150);
            }
            if (i == 3) {
                messageDetailTable.getColumnModel().
                    getColumn(i).setPreferredWidth(150);
            }
        }
        messageDetailScrollPane.setViewportView(messageDetailTable);

        GroupLayout messageDetailPanelLayout = new GroupLayout(messageDetailPanel);
        messageDetailPanel.setLayout(messageDetailPanelLayout);
        messageDetailPanelLayout.setHorizontalGroup(
            messageDetailPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(messageDetailScrollPane, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
        );
        messageDetailPanelLayout.setVerticalGroup(
            messageDetailPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(messageDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageDetailScrollPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        autoExecutePanel.setBorder(BorderFactory.createTitledBorder("Automated Executor"));

        stopExecutorButton.setText("Stop");
        stopExecutorButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                stopExecutorButtonActionPerformed(evt);
            }
        });

        partialsSlider.setMajorTickSpacing(10);
        partialsSlider.setMaximum(50);
        partialsSlider.setPaintLabels(true);
        partialsSlider.setPaintTicks(true);
        partialsSlider.setValue(0);
        partialsSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                partialsSliderChanged(evt);
            }
        });

        partialsLabel.setText("Fills per order:");

        Binding binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, partialsSlider, ELProperty.create("${value}"), partialsNumber, BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        startExecutorButton.setText("Start");
        startExecutorButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                startExecutorButtonActionPerformed(evt);
            }
        });

        delayLabel.setText("Delay:");

        executorDelay.setModel(new DefaultComboBoxModel(new String[] { "1 ms", "10 ms", "100 ms", "1 second", "5 seconds" }));
        executorDelay.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                executorDelayActionPerformed(evt);
            }
        });

        GroupLayout autoExecutePanelLayout = new GroupLayout(autoExecutePanel);
        autoExecutePanel.setLayout(autoExecutePanelLayout);
        autoExecutePanelLayout.setHorizontalGroup(
            autoExecutePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(autoExecutePanelLayout.createSequentialGroup()
                .addGroup(autoExecutePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(autoExecutePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(autoExecutePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(autoExecutePanelLayout.createSequentialGroup()
                                .addComponent(delayLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(executorDelay, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(partialsLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(partialsNumber))
                            .addGroup(autoExecutePanelLayout.createSequentialGroup()
                                .addComponent(startExecutorButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopExecutorButton))))
                    .addComponent(partialsSlider, GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE))
                .addContainerGap())
        );

        autoExecutePanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {startExecutorButton, stopExecutorButton});

        autoExecutePanelLayout.setVerticalGroup(
            autoExecutePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(autoExecutePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(autoExecutePanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(delayLabel)
                    .addComponent(executorDelay, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(partialsNumber)
                    .addComponent(partialsLabel))
                .addGap(11, 11, 11)
                .addComponent(partialsSlider, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(autoExecutePanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(stopExecutorButton)
                    .addComponent(startExecutorButton))
                .addGap(14, 14, 14))
        );

        GroupLayout loadPanelLayout = new GroupLayout(loadPanel);
        loadPanel.setLayout(loadPanelLayout);
        loadPanelLayout.setHorizontalGroup(
            loadPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, loadPanelLayout.createSequentialGroup()
                .addGroup(loadPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(autoExecutePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        loadPanelLayout.setVerticalGroup(
            loadPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(loadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(autoExecutePanel, GroupLayout.PREFERRED_SIZE, 141, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Load", loadPanel);

        orderActionPanel.setBorder(BorderFactory.createTitledBorder("Orders"));

        acknowledgeButton.setText("Acknowledge");
        acknowledgeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                acknowledgeButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        cancelPendingButton.setText("Pending Cancel");
        cancelPendingButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelPendingButtonActionPerformed(evt);
            }
        });

        replacePendingButton.setText("Pending Replace");
        replacePendingButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                replacePendingButtonActionPerformed(evt);
            }
        });

        executeButton.setText("Execute");
        executeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        dfdButton.setText("DFD");
        dfdButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                dfdButtonActionPerformed(evt);
            }
        });

        cancelAcceptButton.setText("Accept Cancel");
        cancelAcceptButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelAcceptButtonActionPerformed(evt);
            }
        });

        replaceAcceptButton.setText("Accept Replace");
        replaceAcceptButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                replaceAcceptButtonActionPerformed(evt);
            }
        });

        orderRejectButton.setText("Reject");
        orderRejectButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                orderRejectButtonActionPerformed(evt);
            }
        });

        cancelRejectButton.setText("Reject Cancel");
        cancelRejectButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelRejectButtonActionPerformed(evt);
            }
        });

        replaceRejectButton.setText("Reject Replace");
        replaceRejectButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                replaceRejectButtonActionPerformed(evt);
            }
        });

        GroupLayout orderActionPanelLayout = new GroupLayout(orderActionPanel);
        orderActionPanel.setLayout(orderActionPanelLayout);
        orderActionPanelLayout.setHorizontalGroup(
            orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, orderActionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
                    .addGroup(orderActionPanelLayout.createSequentialGroup()
                        .addComponent(orderRejectButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6)
                        .addComponent(dfdButton, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE))
                    .addGroup(orderActionPanelLayout.createSequentialGroup()
                        .addComponent(acknowledgeButton, GroupLayout.PREFERRED_SIZE, 95, GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(cancelButton))
                    .addComponent(executeButton, GroupLayout.PREFERRED_SIZE, 171, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
                    .addComponent(cancelRejectButton)
                    .addComponent(cancelAcceptButton)
                    .addComponent(cancelPendingButton))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
                    .addComponent(replacePendingButton)
                    .addComponent(replaceAcceptButton)
                    .addComponent(replaceRejectButton))
                .addContainerGap())
        );

        orderActionPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {replaceAcceptButton, replacePendingButton, replaceRejectButton});

        orderActionPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {cancelAcceptButton, cancelPendingButton, cancelRejectButton});

        orderActionPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {cancelButton, dfdButton});

        orderActionPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {acknowledgeButton, orderRejectButton});

        orderActionPanelLayout.setVerticalGroup(
            orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(orderActionPanelLayout.createSequentialGroup()
                .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(orderActionPanelLayout.createSequentialGroup()
                        .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(cancelPendingButton)
                            .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(cancelButton)
                                .addComponent(acknowledgeButton))
                            .addGroup(orderActionPanelLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(cancelAcceptButton)
                                    .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(orderRejectButton)
                                        .addComponent(dfdButton)))))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(orderActionPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(cancelRejectButton)
                            .addComponent(replaceRejectButton)
                            .addComponent(executeButton)))
                    .addGroup(orderActionPanelLayout.createSequentialGroup()
                        .addComponent(replacePendingButton)
                        .addGap(6, 6, 6)
                        .addComponent(replaceAcceptButton)))
                .addContainerGap())
        );

        orderTable.setAutoCreateRowSorter(true);
        orderTable.setModel(new org.fiximulator.ui.OrderTableModel());
        orderTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        //Set initial column widths
        for (int i = 0; i < orderTable.getColumnCount(); i++) {
            if (i ==0) // Order ID
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(90);
            if (i ==1) // Status
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(100);
            if (i ==2) // Side
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(30);
            if (i ==3)
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(60);
            if (i ==4)
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==5)
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(80);
            if (i ==6) // Limit
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==7) // TIF
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(30);
            if (i ==8) // Executed
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(70);
            if (i ==9) // Open
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==10) // AvgPx
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==11) // ClOrdID
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(90);
            if (i ==12) // OrigClOrdID
            orderTable.getColumnModel().
            getColumn(i).setPreferredWidth(90);
        }
        orderTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        orderScrollPane.setViewportView(orderTable);

        GroupLayout orderPanelLayout = new GroupLayout(orderPanel);
        orderPanel.setLayout(orderPanelLayout);
        orderPanelLayout.setHorizontalGroup(
            orderPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(orderScrollPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(orderPanelLayout.createSequentialGroup()
                .addComponent(orderActionPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        orderPanelLayout.setVerticalGroup(
            orderPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(orderPanelLayout.createSequentialGroup()
                .addComponent(orderActionPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderScrollPane, GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Orders", orderPanel);

        executionActionPanel.setBorder(BorderFactory.createTitledBorder("Executions"));

        executionBustButton.setText("Bust");
        executionBustButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                executionBustButtonActionPerformed(evt);
            }
        });

        executionCorrectButton.setText("Correct");
        executionCorrectButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                executionCorrectButtonActionPerformed(evt);
            }
        });

        GroupLayout executionActionPanelLayout = new GroupLayout(executionActionPanel);
        executionActionPanel.setLayout(executionActionPanelLayout);
        executionActionPanelLayout.setHorizontalGroup(
            executionActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(executionActionPanelLayout.createSequentialGroup()
                .addComponent(executionBustButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executionCorrectButton)
                .addGap(228, 228, 228))
        );
        executionActionPanelLayout.setVerticalGroup(
            executionActionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(executionActionPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(executionBustButton)
                .addComponent(executionCorrectButton))
        );

        executionTable.setDefaultRenderer(Object.class, new ExecutionCellRenderer());
        executionTable.setAutoCreateRowSorter(true);
        executionTable.setModel(new org.fiximulator.ui.ExecutionTableModel());
        executionTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        //Set initial column widths
        for (int i = 0; i < executionTable.getColumnCount(); i++) {
            if (i ==0) // ID
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(90);
            if (i ==1) // ClOrdID
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(90);
            if (i ==2) // Side
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(30);
            if (i ==3) // Sybol
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(60);
            if (i ==4) // LastQty
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==5) // LastPx
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==6) // CumQty
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==7) // AvgPx
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==8) // Open
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(50);
            if (i ==9) // ExecType
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(70);
            if (i ==10) // ExecTransType
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(70);
            if (i ==11) // RefID
            executionTable.getColumnModel().
            getColumn(i).setPreferredWidth(90);
        }
        executionTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        executionScrollPane.setViewportView(executionTable);

        GroupLayout executionPanelLayout = new GroupLayout(executionPanel);
        executionPanel.setLayout(executionPanelLayout);
        executionPanelLayout.setHorizontalGroup(
            executionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(executionActionPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(executionScrollPane, 0, 0, Short.MAX_VALUE)
        );
        executionPanelLayout.setVerticalGroup(
            executionPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(executionPanelLayout.createSequentialGroup()
                .addComponent(executionActionPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executionScrollPane, GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Executions", executionPanel);

        executionTable.setDefaultRenderer(Object.class, new ExecutionCellRenderer());

        autoResponsePanel.setBorder(BorderFactory.createTitledBorder("Automated Responses"));

        autoAcknowledge.setText("Acknowledge orders on receipt");
        try {
            autoAcknowledge.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorAutoAcknowledge"));
        } catch (Exception e) {}
        autoAcknowledge.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                autoAcknowledgeActionPerformed(evt);
            }
        });

        autoPendingCancel.setText("Send Pending Cancel");
        try {
            autoPendingCancel.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorAutoPendingCancel"));
        } catch (Exception e) {}
        autoPendingCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                autoPendingCancelActionPerformed(evt);
            }
        });

        autoPendingReplace.setText("Send Pending Replace");
        try {
            autoPendingReplace.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorAutoPendingReplace"));
        } catch (Exception e) {}
        autoPendingReplace.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                autoPendingReplaceActionPerformed(evt);
            }
        });

        autoCancel.setText("Accept order cancellations");
        try {
            autoCancel.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorAutoCancel"));
        } catch (Exception e) {}
        autoCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                autoCancelActionPerformed(evt);
            }
        });

        autoReplace.setText("Accept order replacements");
        try {
            autoReplace.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorAutoReplace"));
        } catch (Exception e) {}
        autoReplace.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                autoReplaceActionPerformed(evt);
            }
        });

        GroupLayout autoResponsePanelLayout = new GroupLayout(autoResponsePanel);
        autoResponsePanel.setLayout(autoResponsePanelLayout);
        autoResponsePanelLayout.setHorizontalGroup(
            autoResponsePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(autoResponsePanelLayout.createSequentialGroup()
                .addGroup(autoResponsePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(autoPendingCancel)
                    .addComponent(autoCancel)
                    .addComponent(cancelSeparator, GroupLayout.PREFERRED_SIZE, 177, GroupLayout.PREFERRED_SIZE)
                    .addComponent(autoAcknowledge)
                    .addComponent(replaceSeparator, GroupLayout.PREFERRED_SIZE, 177, GroupLayout.PREFERRED_SIZE)
                    .addComponent(autoPendingReplace)
                    .addComponent(autoReplace))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        autoResponsePanelLayout.setVerticalGroup(
            autoResponsePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(autoResponsePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(autoAcknowledge)
                .addGap(6, 6, 6)
                .addComponent(cancelSeparator, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoPendingCancel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoCancel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(replaceSeparator, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoPendingReplace)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoReplace)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        saveSettingsButton.setText("Save Settings");
        saveSettingsButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveSettingsButtonActionPerformed(evt);
            }
        });

        appSettingsPanel.setBorder(BorderFactory.createTitledBorder("FIXimulator Settings"));

        pricePrecisionLabel.setText("Price precision:");

        cachedObjectsLabel.setText("Number of cached objects:");

        cachedObjectsCombo.setModel(new DefaultComboBoxModel(new String[] { "50", "100", "200" }));
        try {
            Long settingValue = FIXimulator.getApplication().getSettings()
            .getLong("FIXimulatorCachedObjects");
            if (settingValue == 50 || settingValue == 100 || settingValue == 200) {
                cachedObjectsCombo.setSelectedItem(settingValue.toString());
            } else {
                // default due to bad value
                cachedObjectsCombo.setSelectedItem("50");
                FIXimulator.getApplication().getSettings()
                .setLong("FIXimulatorCachedObjects", 50);
            }
        } catch (Exception e) {
            // default to to setting not existing
            cachedObjectsCombo.setSelectedItem("50");
            FIXimulator.getApplication().getSettings()
            .setLong("FIXimulatorCachedObjects", 50);
        }
        cachedObjectsCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cachedObjectsComboActionPerformed(evt);
            }
        });

        pricePrecisionCombo.setModel(new DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        try {
            Long settingValue = FIXimulator.getApplication().getSettings()
            .getLong("FIXimulatorPricePrecision");
            if (settingValue >= 0 && settingValue < 10) {
                pricePrecisionCombo.setSelectedItem(settingValue.toString());
            } else {
                // default due to bad value
                pricePrecisionCombo.setSelectedItem("4");
                FIXimulator.getApplication().getSettings()
                .setLong("FIXimulatorPricePrecision", 4);
            }
        } catch (Exception e) {
            // default to to setting not existing
            pricePrecisionCombo.setSelectedItem("4");
            FIXimulator.getApplication().getSettings()
            .setLong("FIXimulatorPricePrecision", 4);
        }
        pricePrecisionCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                pricePrecisionComboActionPerformed(evt);
            }
        });

        sendOnBehalfOfCompID.setText("Send OnBehalfOfCompID (115)");
        try {
            sendOnBehalfOfCompID.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorSendOnBehalfOfCompID"));
        } catch (Exception e) {}
        sendOnBehalfOfCompID.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                sendOnBehalfOfCompIDActionPerformed(evt);
            }
        });

        sendOnBehalfOfSubID.setText("Send OnBehalfOfSubID (116)");
        try {
            sendOnBehalfOfSubID.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorSendOnBehalfOfSubID"));
        } catch (Exception e) {}
        sendOnBehalfOfSubID.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                sendOnBehalfOfSubIDActionPerformed(evt);
            }
        });

        logToFileLabel.setText("<html>Changing the logging requires saving the settings and restarting the application...</htm;>");

        logToFile.setText("Log to file");
        try {
            logToFile.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorLogToFile"));
        } catch (Exception e) {}
        logToFile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                logToFileActionPerformed(evt);
            }
        });

        logToDB.setText("Log to database");
        try {
            logToDB.setSelected(
                FIXimulator.getApplication().getSettings()
                .getBool("FIXimulatorLogToDB"));
        } catch (Exception e) {}
        logToDB.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                logToDBActionPerformed(evt);
            }
        });

        GroupLayout appSettingsPanelLayout = new GroupLayout(appSettingsPanel);
        appSettingsPanel.setLayout(appSettingsPanelLayout);
        appSettingsPanelLayout.setHorizontalGroup(
            appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(appSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(logToFileLabel, GroupLayout.PREFERRED_SIZE, 197, GroupLayout.PREFERRED_SIZE)
                    .addGroup(appSettingsPanelLayout.createSequentialGroup()
                        .addComponent(logToFile)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logToDB))
                    .addComponent(oboCompIDSeparator1)
                    .addComponent(sendOnBehalfOfSubID)
                    .addGroup(appSettingsPanelLayout.createSequentialGroup()
                        .addGroup(appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(cachedObjectsLabel)
                            .addComponent(pricePrecisionLabel))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(cachedObjectsCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(pricePrecisionCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                    .addComponent(oboCompIDSeparator, GroupLayout.Alignment.TRAILING)
                    .addComponent(sendOnBehalfOfCompID))
                .addContainerGap())
        );

        appSettingsPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {cachedObjectsCombo, pricePrecisionCombo});

        appSettingsPanelLayout.setVerticalGroup(
            appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(appSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(pricePrecisionLabel)
                    .addComponent(pricePrecisionCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cachedObjectsLabel)
                    .addComponent(cachedObjectsCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(oboCompIDSeparator, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendOnBehalfOfCompID)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendOnBehalfOfSubID)
                .addGap(12, 12, 12)
                .addComponent(oboCompIDSeparator1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logToFileLabel, GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(appSettingsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(logToFile)
                    .addComponent(logToDB))
                .addContainerGap())
        );

        showSettingsButton.setText("Show Settings");
        showSettingsButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                showSettingsButtonActionPerformed(evt);
            }
        });

        GroupLayout settingsPanelLayout = new GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(autoResponsePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(appSettingsPanel, GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                    .addGroup(GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                        .addComponent(showSettingsButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveSettingsButton)))
                .addContainerGap())
        );

        settingsPanelLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {saveSettingsButton, showSettingsButton});

        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(appSettingsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(autoResponsePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(saveSettingsButton)
                    .addComponent(showSettingsButton))
                .addContainerGap())
        );

        mainTabbedPane.addTab("Settings", settingsPanel);

        fileMenu.setText("File");

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        aboutMenuItem.setText("About...");
        aboutMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        mainMenuBar.add(helpMenu);

        setJMenuBar(mainMenuBar);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(messagePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(mainTabbedPane, GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(messageDetailPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(statusBarPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(messageDetailPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainTabbedPane, GroupLayout.PREFERRED_SIZE, 336, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messagePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBarPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    } // < / editor - fold> // GEN - END:initComponents

private void okButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_okButtonActionPerformed
    aboutDialog.dispose();
} // GEN - LAST:event_okButtonActionPerformed

private void startExecutorButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_startExecutorButtonActionPerformed
    int delay = 1;
    if (this.executorDelay.getSelectedItem().toString().equals("10 ms"))
        delay = 10;
    if (this.executorDelay.getSelectedItem().toString().equals("100 ms"))
        delay = 100;
    if (this.executorDelay.getSelectedItem().toString().equals("1 second"))
        delay = 1000;
    if (this.executorDelay.getSelectedItem().toString().equals("5 seconds"))
        delay = 5000;
    int partials = (int)partialsSlider.getValue();
    if (partials == 0) partials = 1;
    FIXimulator.getApplication().startExecutor(delay, partials, quoteService);
} // GEN - LAST:event_startExecutorButtonActionPerformed

private void stopExecutorButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_stopExecutorButtonActionPerformed
    FIXimulator.getApplication().stopExecutor();
} // GEN - LAST:event_stopExecutorButtonActionPerformed

private void acknowledgeButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_acknowledgeButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.getStatus().equals("Received") ||
             order.getStatus().equals("Pending New")) {
            FIXimulator.getApplication().acknowledge(order);
        } else {
            System.out.println(
                    "Order in status \"" + order.getStatus() + "\" " +
                    "cannot be acknowledged...");
        }
    }
} // GEN - LAST:event_acknowledgeButtonActionPerformed

private void partialsSliderChanged(ChangeEvent evt) { // GEN - FIRST:event_partialsSliderChanged
   if (!this.partialsSlider.getValueIsAdjusting()) {
        int partials = (int)partialsSlider.getValue();
        if (partials == 0) partials = 1;
        System.out.println("The number of partials was changed to: " + partials);
        FIXimulator.getApplication().setNewExecutorPartials(partials);
    }
} // GEN - LAST:event_partialsSliderChanged

private void executionBustButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_executionBustButtonActionPerformed
    int row = executionTable.getSelectedRow();
    // if there is a row selected
    if (row != -1) {
        row = executionTable.convertRowIndexToModel(row);
        Execution execution =
                FIXimulator.getApplication().getExecutions().getExecution(row);
        if (execution.getExecType().equals("Fill") ||
             execution.getExecType().equals("Partial fill")) {
            FIXimulator.getApplication().bust(execution);
        } else {
            System.out.println(
                    "\"" + execution.getExecType() + "\" " +
                    "executions cannot be busted...");
        }
    }
} // GEN - LAST:event_executionBustButtonActionPerformed

private void executorDelayActionPerformed(ActionEvent evt) { // GEN - FIRST:event_executorDelayActionPerformed
    int delay = 1;
    String value = executorDelay.getSelectedItem().toString();
    if (value.equals("10 ms")) delay = 10;
    if (value.equals("100 ms")) delay = 100;
    if (value.equals("1 second")) delay = 1000;
    if (value.equals("5 seconds")) delay = 5000;
    FIXimulator.getApplication().setNewExecutorDelay(delay);
} // GEN - LAST:event_executorDelayActionPerformed

private void autoReplaceActionPerformed(ActionEvent evt) { // GEN - FIRST:event_autoReplaceActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorAutoReplace",
        autoReplace.isSelected());
} // GEN - LAST:event_autoReplaceActionPerformed

private void autoPendingCancelActionPerformed(ActionEvent evt) { // GEN - FIRST:event_autoPendingCancelActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorAutoPendingCancel",
        autoPendingCancel.isSelected());
} // GEN - LAST:event_autoPendingCancelActionPerformed

private void autoAcknowledgeActionPerformed(ActionEvent evt) { // GEN - FIRST:event_autoAcknowledgeActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorAutoAcknowledge",
        autoAcknowledge.isSelected());
} // GEN - LAST:event_autoAcknowledgeActionPerformed

private void autoPendingReplaceActionPerformed(ActionEvent evt) { // GEN - FIRST:event_autoPendingReplaceActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorAutoPendingReplace",
        autoPendingReplace.isSelected());
} // GEN - LAST:event_autoPendingReplaceActionPerformed

private void autoCancelActionPerformed(ActionEvent evt) { // GEN - FIRST:event_autoCancelActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorAutoCancel",
        autoCancel.isSelected());
} // GEN - LAST:event_autoCancelActionPerformed

private void saveSettingsButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_saveSettingsButtonActionPerformed
    FIXimulator.getApplication().saveSettings();
} // GEN - LAST:event_saveSettingsButtonActionPerformed

private void exitMenuItemActionPerformed(ActionEvent evt) { // GEN - FIRST:event_exitMenuItemActionPerformed
System.exit(0);
} // GEN - LAST:event_exitMenuItemActionPerformed

private void aboutMenuItemActionPerformed(ActionEvent evt) { // GEN - FIRST:event_aboutMenuItemActionPerformed
aboutDialog.pack();
    aboutDialog.setVisible(true);
} // GEN - LAST:event_aboutMenuItemActionPerformed

private void pricePrecisionComboActionPerformed(ActionEvent evt) { // GEN - FIRST:event_pricePrecisionComboActionPerformed
    FIXimulator.getApplication().getSettings()
            .setLong("FIXimulatorPricePrecision",
            Long.valueOf(pricePrecisionCombo.getSelectedItem().toString()));
} // GEN - LAST:event_pricePrecisionComboActionPerformed

private void sendOnBehalfOfCompIDActionPerformed(ActionEvent evt) { // GEN - FIRST:event_sendOnBehalfOfCompIDActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorSendOnBehalfOfCompID",
        sendOnBehalfOfCompID.isSelected());
} // GEN - LAST:event_sendOnBehalfOfCompIDActionPerformed

private void sendOnBehalfOfSubIDActionPerformed(ActionEvent evt) { // GEN - FIRST:event_sendOnBehalfOfSubIDActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorSendOnBehalfOfSubID",
        sendOnBehalfOfSubID.isSelected());
} // GEN - LAST:event_sendOnBehalfOfSubIDActionPerformed

private void cachedObjectsComboActionPerformed(ActionEvent evt) { // GEN - FIRST:event_cachedObjectsComboActionPerformed
    FIXimulator.getApplication().getSettings()
            .setLong("FIXimulatorCachedObjects",
            Long.valueOf(cachedObjectsCombo.getSelectedItem().toString()));
} // GEN - LAST:event_cachedObjectsComboActionPerformed

private void showSettingsButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_showSettingsButtonActionPerformed
    System.out.println(FIXimulator.getApplication().getSettings().toString());
} // GEN - LAST:event_showSettingsButtonActionPerformed

private void orderRejectButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_orderRejectButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.getStatus().equals("Received") ||
             order.getStatus().equals("Pending New")) {
            FIXimulator.getApplication().reject(order);
        } else {
            System.out.println(
                    "Order in status \"" + order.getStatus() + "\" " +
                    "cannot be rejected...");
        }
    }
} // GEN - LAST:event_orderRejectButtonActionPerformed

private void cancelButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_cancelButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        FIXimulator.getApplication().cancel(order);
    }
} // GEN - LAST:event_cancelButtonActionPerformed

private void dfdButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_dfdButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        FIXimulator.getApplication().dfd(order);
    }
} // GEN - LAST:event_dfdButtonActionPerformed

private void cancelPendingButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_cancelPendingButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.isReceivedCancel()) {
            FIXimulator.getApplication().pendingCancel(order);
        } else {
            System.out.println(
                    "Order is not in a valid status for pending cancel");
        }
    }
} // GEN - LAST:event_cancelPendingButtonActionPerformed

private void cancelAcceptButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_cancelAcceptButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        FIXimulator.getApplication().cancel(order);
    }
} // GEN - LAST:event_cancelAcceptButtonActionPerformed

private void replacePendingButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_replacePendingButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.isReceivedReplace()) {
            FIXimulator.getApplication().pendingReplace(order);
        } else {
            System.out.println(
                    "Order is not in a valid status for pending replace");
        }
    }
} // GEN - LAST:event_replacePendingButtonActionPerformed

private void replaceAcceptButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_replaceAcceptButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.isReceivedReplace() ||
                order.getStatus().equals("Pending Replace")) {
            FIXimulator.getApplication().replace(order);
        } else {
            System.out.println(
                    "Order is not in a valid status to replace");
        }
    }
} // GEN - LAST:event_replaceAcceptButtonActionPerformed

private void cancelRejectButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_cancelRejectButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.isReceivedCancel() ||
                order.getStatus().equals("Pending Cancel")) {
            FIXimulator.getApplication().rejectCancelReplace(order, true);
        } else {
            System.out.println(
                    "Order is not in a valid status to reject cancellation");
        }
    }
} // GEN - LAST:event_cancelRejectButtonActionPerformed

private void replaceRejectButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_replaceRejectButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        if (order.isReceivedReplace() ||
                order.getStatus().equals("Pending Replace")) {
            FIXimulator.getApplication().rejectCancelReplace(order, false);
        } else {
            System.out.println(
                    "Order is not in a valid status to reject replace request");
        }
    }
} // GEN - LAST:event_replaceRejectButtonActionPerformed

private void executionDialogOKActionPerformed(ActionEvent evt) { // GEN - FIRST:event_executionDialogOKActionPerformed
    dialogExecution.setLastShares(
            Integer.parseInt(executionDialogShares.getText()));
    dialogExecution.setLastPx(
            Double.parseDouble(executionDialogPrice.getText()));
    String refID = dialogExecution.getRefID();
    // New execution
    if (refID == null) {
        FIXimulator.getApplication().execute(dialogExecution);
    // Correction
    } else {
        FIXimulator.getApplication().correct(dialogExecution);
    }
    executionDialog.dispose();
} // GEN - LAST:event_executionDialogOKActionPerformed

private void executionDialogCancelActionPerformed(ActionEvent evt) { // GEN - FIRST:event_executionDialogCancelActionPerformed
    executionDialog.dispose();
} // GEN - LAST:event_executionDialogCancelActionPerformed

private void executeButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_executeButtonActionPerformed
    int row = orderTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = orderTable.convertRowIndexToModel(row);
        Order order = FIXimulator.getApplication().getOrders().getOrder(row);
        dialogExecution = new Execution(order);
        executionDialogShares.setValue(0);
        executionDialogPrice.setValue(0.0);
        executionDialog.pack();
        executionDialog.setVisible(true);
    }
} // GEN - LAST:event_executeButtonActionPerformed

private void executionCorrectButtonActionPerformed(ActionEvent evt) { // GEN - FIRST:event_executionCorrectButtonActionPerformed
    int row = executionTable.getSelectedRow();
    // if no rows are selected
    if (row != -1) {
        row = executionTable.convertRowIndexToModel(row);
        Execution execution =
                FIXimulator.getApplication().getExecutions().getExecution(row);
        if (execution.getExecType().equals("Fill") ||
             execution.getExecType().equals("Partial fill")) {
            dialogExecution = execution.clone();
            executionDialogShares.setValue(execution.getLastShares());
            executionDialogPrice.setValue(execution.getLastPx());
            executionDialog.pack();
            executionDialog.setVisible(true);
        } else {
            System.out.println(
                    "\"" + execution.getExecType() + "\" " +
                    "executions cannot be corrected...");
        }
    }
} // GEN - LAST:event_executionCorrectButtonActionPerformed

private void logToFileActionPerformed(ActionEvent evt) { // GEN - FIRST:event_logToFileActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorLogToFile",
        sendOnBehalfOfSubID.isSelected());
} // GEN - LAST:event_logToFileActionPerformed

private void logToDBActionPerformed(ActionEvent evt) { // GEN - FIRST:event_logToDBActionPerformed
    FIXimulator.getApplication().getSettings()
        .setBool("FIXimulatorLogToDB",
        sendOnBehalfOfSubID.isSelected());
} // GEN - LAST:event_logToDBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JDialog aboutDialog;
    private JLabel aboutDialogLabel;
    private JMenuItem aboutMenuItem;
    private JPanel aboutPanel;
    private JButton acknowledgeButton;
    private JPanel appSettingsPanel;
    private JCheckBox autoAcknowledge;
    private JCheckBox autoCancel;
    private JPanel autoExecutePanel;
    private JCheckBox autoPendingCancel;
    private JCheckBox autoPendingReplace;
    private JCheckBox autoReplace;
    private JPanel autoResponsePanel;
    private JComboBox cachedObjectsCombo;
    private JLabel cachedObjectsLabel;
    private JButton cancelAcceptButton;
    private JButton cancelButton;
    private JButton cancelPendingButton;
    private JButton cancelRejectButton;
    private JSeparator cancelSeparator;
    private JLabel clientConnectedLabel;
    private JLabel delayLabel;
    private JButton dfdButton;
    private JButton executeButton;
    private JPanel executionActionPanel;
    private JButton executionBustButton;
    private JButton executionCorrectButton;
    private JDialog executionDialog;
    private JButton executionDialogCancel;
    private JButton executionDialogOK;
    private JFormattedTextField executionDialogPrice;
    private JFormattedTextField executionDialogShares;
    private JPanel executionPanel;
    private JLabel executionPriceLabel;
    private JScrollPane executionScrollPane;
    private JLabel executionSharesLabel;
    private JTable executionTable;
    private JComboBox executorDelay;
    private JLabel executorRunningLabel;
    private JMenuItem exitMenuItem;
    private JMenu fileMenu;
    private JMenu helpMenu;
    private JPanel loadPanel;
    private JCheckBox logToDB;
    private JCheckBox logToFile;
    private JLabel logToFileLabel;
    private JMenuBar mainMenuBar;
    private JTabbedPane mainTabbedPane;
    private JPanel messageDetailPanel;
    private JScrollPane messageDetailScrollPane;
    private JTable messageDetailTable;
    private JPanel messagePanel;
    private JScrollPane messageScrollPane;
    private JTable messageTable;
    private JSeparator oboCompIDSeparator;
    private JSeparator oboCompIDSeparator1;
    private JButton okButton;
    private JPanel orderActionPanel;
    private JPanel orderPanel;
    private JButton orderRejectButton;
    private JScrollPane orderScrollPane;
    private JTable orderTable;
    private JLabel partialsLabel;
    private JLabel partialsNumber;
    private JSlider partialsSlider;
    private JComboBox pricePrecisionCombo;
    private JLabel pricePrecisionLabel;
    private JButton replaceAcceptButton;
    private JButton replacePendingButton;
    private JButton replaceRejectButton;
    private JSeparator replaceSeparator;
    private JButton saveSettingsButton;
    private JCheckBox sendOnBehalfOfCompID;
    private JCheckBox sendOnBehalfOfSubID;
    private JPanel settingsPanel;
    private JButton showSettingsButton;
    private JButton startExecutorButton;
    private JPanel statusBarPanel;
    private JButton stopExecutorButton;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
